--	California Insurance Group.
--  Purpose: Calls the other procedures in the package to Feed the data from Claim Center(i.e.CC) to STG(CCST) tables
--  Author : Rajanikanth Suthrapu
--  STG Tables : CCST_DW_CLAIM , CCST_DW_CLAIMANT , CCST_DW_CLAIMANT_DETAIL, CCST_DW_CLAIMANT_ADJUSTER
--  STG Archive Tables : Data will CCSTA_DW_CLAIM , CCSTA_DW_CLAIMANT , CCSTA_DW_CLAIMANT_DETAIL, CCSTA_DW_CLAIMANT_ADJUSTER
-- 
--  SP_UPDATE_CCST_TO_DW_CLMT_DT : CALLING PKG_DAILY_DW_UPDATE.UP_DW_CLAIMANT_DETAIL , SINCE THE DATA WILL BE UNLOAD/RELOAD
--  DURING THE PROCESS OF INSERTING INTO DW_CLAIMANT_ADJUSTER.
--  SP_UPDATE_CCST_TO_DW_CLMT_ADJ :  CALLING PKG_DAILY_DW_UPDATE.UP_DW_CLAIMANT_ADJUSTER , SINCE THE DATA WILL BE UNLOAD/RELOAD
--  DURING THE PROCESS OF INSERTING INTO DW_CLAIMANT_ADJUSTER.
create or replace PACKAGE BODY                 PKG_DAILY_CC_DW_UPDATE_PROD AS
PROCEDURE SP_CCST_DW_MAIN (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) IS
    
    
    V_RUN_DATE NUMBER;
    V_COMMIT_COUNT                 NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    V_SOURCE VARCHAR(20) := 'CC';
   
    CURSOR CUR_CCST_DW_CLAIMANT_DETAIL IS
    SELECT *
    FROM CCST_DW_CLAIMANT_DETAIL
    WHERE TRANS_DATE >= V_SDATE ;


   CURSOR CUR_CCST_DW_CLAIMANT_ADJUSTER IS
    SELECT *
    FROM CCST_DW_CLAIMANT_ADJUSTER
    WHERE TRANS_DATE >= V_SDATE; 
    
    CURSOR CUR_DW_CLAIMANT_DETAIL IS
    SELECT *
    FROM DW_CLAIMANT_DETAIL
    WHERE TRANS_DATE >= V_SDATE AND SOURCE = V_SOURCE; 
    
   CURSOR CUR_DW_CLAIMANT_ADJUSTER IS
    SELECT *
    FROM DW_CLAIMANT_ADJUSTER
    WHERE TRANS_DATE >= V_SDATE AND SOURCE = V_SOURCE;
    
    BEGIN
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

   V_SDATE := START_DATE;
   V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
        
        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCST_DW_MAIN',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );
        COMMIT;
        
        SP_CCST_DW_CLAIM(START_DATE, END_DATE);
        SP_CCST_DW_CLAIMANT(START_DATE, END_DATE);
        

        -- DELETE THE RECORDS FROM CCST_DW_CLAIMANT_DETAIL WHICH HAVE THE TRANS_DATE BETWEEN THE START DATE AND END DATE.
        BEGIN
          -- DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - BEGIN');
            FOR V_CCST_DW_CLAIMANT_DETAIL IN CUR_CCST_DW_CLAIMANT_DETAIL LOOP
            --     DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS');
              DELETE FROM CCST_DW_CLAIMANT_DETAIL
              WHERE  CCST_DW_CLAIMANT_DETAIL = V_CCST_DW_CLAIMANT_DETAIL.CCST_DW_CLAIMANT_DETAIL;
              V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
              IF V_COMMIT_COUNT > 999 THEN
                 COMMIT;
                 V_COMMIT_COUNT := 0;
               END IF;
           END LOOP;
           --  DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - END');
           COMMIT;
       END;
       
        -- DELETE THE RECORDS FROM CCST_DW_CLAIMANT_ADJUSTER WHICH HAVE THE TRANS_DATE BETWEEN THE START DATE AND END DATE.
        BEGIN
          -- DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT ADJUSTER - BEGIN');
            FOR V_CCST_DW_CLAIMANT_ADJUSTER IN CUR_CCST_DW_CLAIMANT_ADJUSTER LOOP
            --     DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT ADJUSTER');
              DELETE FROM CCST_DW_CLAIMANT_ADJUSTER
              WHERE  CCST_DW_CLAIMANT_ADJUSTER = V_CCST_DW_CLAIMANT_ADJUSTER.CCST_DW_CLAIMANT_ADJUSTER;
              V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
              IF V_COMMIT_COUNT > 999 THEN
                 COMMIT;
                 V_COMMIT_COUNT := 0;
               END IF;
           END LOOP;
           --  DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT ADJUSTER - END');
           COMMIT;
       END;

       
        -- DELETE THE RECORDS FROM DW_CLAIMANT_ADJUSTER WHICH HAVE THE TRANS_DATE BETWEEN THE START DATE AND END DATE.
        BEGIN
          -- DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - BEGIN');
            FOR V_DW_CLAIMANT_ADJUSTER IN CUR_DW_CLAIMANT_ADJUSTER LOOP
            --     DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT ADJUSTER');
              DELETE FROM DW_CLAIMANT_ADJUSTER
              WHERE  DW_CLAIMANT_ADJUSTER = V_DW_CLAIMANT_ADJUSTER.DW_CLAIMANT_ADJUSTER;
              V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
              IF V_COMMIT_COUNT > 999 THEN
                 COMMIT;
                 V_COMMIT_COUNT := 0;
               END IF;
           END LOOP;
           --  DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT ADJUSTER - END');
           COMMIT;
       END;
        SP_CCST_DW_CLAIMANT_ADJUSTER(START_DATE, END_DATE);
        
        
       
       -- DELETE THE RECORDS FROM DW_CLAIMANT_DETAIL WHICH HAVE THE TRANS_DATE BETWEEN THE START DATE AND END DATE.
        BEGIN
          -- DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - BEGIN');
            FOR V_DW_CLAIMANT_DETAIL IN CUR_DW_CLAIMANT_DETAIL LOOP
            --     DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS');
              DELETE FROM DW_CLAIMANT_DETAIL
              WHERE  DW_CLAIMANT_DETAIL = V_DW_CLAIMANT_DETAIL.DW_CLAIMANT_DETAIL;
              V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
              IF V_COMMIT_COUNT > 999 THEN
                 COMMIT;
                 V_COMMIT_COUNT := 0;
               END IF;
           END LOOP;
           --  DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - END');
           COMMIT;
       END;
        SP_CCST_DW_CLAIMANT_DETAIL(START_DATE, END_DATE);
        
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
END SP_CCST_DW_MAIN;

PROCEDURE SP_CCST_DW_CLAIM (
         START_DATE IN DATE,
         END_DATE   IN DATE
    ) IS
        
	V_ICNT			NUMBER := 0 ;
	V_UCNT			NUMBER := 0 ;
    V_COMMIT_COUNT  NUMBER;
    V_CCST_DW_CLAIM NUMBER;
    V_RUN_DATE NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    
         CURSOR CUR_CC_DW_CLAIM IS
         WITH CLAIM_DATA AS (
            SELECT
                C.ID            AS CLAIM_KEY,
                P.DECPOLICY_EXT AS DEC_KEY,
                P.ID            AS POLICY_KEY,
              --  P.LEGALNAME_EXT AS INSURED_NAME,
                CC.NAME         AS AGENCY_NAME,
                TLUCT.NAME      AS WRITING_COMPANY,
                C.CLAIMNUMBER   AS CLAIM_NBR,
                --  size of_loss is claim_prefix i.e, Using 'C' as hard coded value since no reference in CC
                C.LOSSDATE      AS DATE_OF_LOSS,
                TLS.NAME        AS CLAIM_STATUS,
                C.UPDATETIME    AS CLAIM_STATUS_DATE,
                C.PUBLICID,
                C.CREATETIME,
                CRE.USERNAME     AS CRETEUSERID,
                CREN.USERNAME     AS AUDITID,
                C.UPDATETIME
            FROM
                CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK   C
                LEFT OUTER JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK  P ON C.POLICYID = P.ID AND P.RETIRED = 0
                LEFT OUTER JOIN CCADMIN.CCX_POLICYDEPARTMENT_EXT@ECIG_TO_GWCC_QA_LINK   PDE ON P.POLICYDEPARTMENT_EXTID = PDE.ID AND PDE.RETIRED =0
                LEFT OUTER JOIN CCADMIN.CCTL_UNDERWRITINGCOMPANYTYPE@ECIG_TO_GWCC_QA_LINK  TLUCT ON P.UNDERWRITINGCO = TLUCT.ID AND TLUCT.RETIRED = 0
                LEFT OUTER JOIN WRITING_COMPANY WC ON WC.COMPANY_NAME = TLUCT.NAME -- JOINED WITH CURRENT ECIG TABLES
                LEFT OUTER JOIN CCADMIN.CCTL_CLAIMSTATE@ECIG_TO_GWCC_QA_LINK TLS ON TLS.ID = C.STATE AND TLS.RETIRED = 0
                LEFT OUTER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CC ON C.CLAIMANTDENORMID = CC.ID AND CC.RETIRED =0 
                LEFT OUTER JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK  USR ON USR.ID = P.CREATEUSERID AND USR.RETIRED =0
                LEFT OUTER JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK  CRE ON CRE.ID = USR.CREDENTIALID AND CRE.RETIRED =0
                LEFT OUTER JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK  USRN ON USRN.ID = P.UPDATEUSERID AND USRN.RETIRED =0 
                LEFT OUTER JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK  CREN ON CREN.ID = USRN.UPDATEUSERID AND CREN.RETIRED =0
                WHERE TLS.NAME NOT IN ('Draft')
                
             ),
             POLICY_CONTACTS AS(
            select POLICYID
            , MAX(AGENCYDOMICILESTATE_EXT) AS AGENCYDOMICILESTATE
            , MAX(BUSINESS_NAME) AS BUSINESS_NAME
            , MAX(DECODE(CTROLE_POLICY_TYPECODE, 'agent', NAME)) AS AGENCY
            , MAX(SUBSTR(DECODE(CTROLE_POLICY_TYPECODE, 'insured', NAME),1,80)) AS INSURED_NAME
            --, BUSINESS_NAME
            from (
                SELECT
                         CCTRP.POLICYID
                        , CCTP.ID AS CLAIMCONTACTID_POLICY
                        , CCTRP.ID AS CLAIMCONTACTROLEID_POLICY
                        , CTP.NAME AS CONTACT_POLICY_NAME
                        , CTP.FIRSTNAME AS CONTACT_POLICY_FNAME
                        , CTP.LASTNAME AS CONTACT_POLICY_LNAME
                        , CTP.MIDDLENAME AS CONTACT_POLICY_MNAME
                        , CTP.DOINGBUSINESSAS_EXT AS BUSINESS_NAME
                        , CTP.AGENCYDOMICILESTATE_EXT
                        , TLCCTR.NAME AS CONTACT_ROLE_POLICY
                        , TLCCTR.TYPECODE AS CTROLE_POLICY_TYPECODE
                        , CASE WHEN CTP.NAME IS NOT NULL
                            THEN CTP.NAME 
                            WHEN CTP.FIRSTNAME IS NOT NULL AND CTP.LASTNAME IS NOT NULL
                            THEN CTP.LASTNAME || ' ' || CTP.FIRSTNAME
                             WHEN CTP.FIRSTNAME IS NOT NULL
                            THEN CTP.FIRSTNAME
                             WHEN CTP.LASTNAME IS NOT NULL
                            THEN CTP.LASTNAME 
                --                ELSE CD.INSURED_NAME
                            END NAME       
                FROM
                CLAIM_DATA CD 
                INNER JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRP ON CCTRP.POLICYID=CD.POLICY_KEY  AND CCTRP.RETIRED=0 -- FOR AGENT
                INNER JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID=CCTRP.ROLE AND TLCCTR.TYPECODE IN ('agent', 'insured') AND TLCCTR.RETIRED=0 -- FOR AGENT
                INNER JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTP ON  CCTRP.ClaimContactID=CCTP.ID AND CCTP.RETIRED=0 -- FOR AGENT
                INNER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTP ON CTP.ID=CCTP.CONTACTID AND CTP.RETIRED=0)
                GROUP BY POLICYID--, BUSINESS_NAME, AGENCYDOMICILESTATE_EXT
            ),
            CLAIM AS
            (
              SELECT
              CD.CLAIM_KEY,
              CD.DEC_KEY,
              PC.INSURED_NAME,
              PC.AGENCY,
              CD.WRITING_COMPANY,
              CD.CLAIM_NBR,
              CD.DATE_OF_LOSS,
              CD.CLAIM_STATUS,
              CD.CLAIM_STATUS_DATE,
              CD.PUBLICID,
              CD.CRETEUSERID,
              CD.CREATETIME,
              CD.AUDITID,
              CD.UPDATETIME
              FROM CLAIM_DATA CD
              INNER JOIN POLICY_CONTACTS PC ON PC.POLICYID=CD.POLICY_KEY
            )
           SELECT * FROM CLAIM
            WHERE
               UPDATETIME >= START_DATE
            ORDER BY
                UPDATETIME;

        REC_CLAIM CUR_CC_DW_CLAIM%ROWTYPE;
    BEGIN
	   V_SDATE := START_DATE;
	   V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');

        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_CCST_DW.SP_CCST_DW_CLAIM',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );
        COMMIT;

        OPEN CUR_CC_DW_CLAIM;
        LOOP
            FETCH CUR_CC_DW_CLAIM INTO REC_CLAIM;
            EXIT WHEN CUR_CC_DW_CLAIM%NOTFOUND;

        BEGIN    
        SELECT CCST_DW_CLAIM
		INTO V_CCST_DW_CLAIM
		FROM CCST_DW_CLAIM
		WHERE CLAIM_KEY = REC_CLAIM.CLAIM_KEY;

        UPDATE CCST_DW_CLAIM
		SET CLAIM_KEY = REC_CLAIM.CLAIM_KEY,
			DEC_KEY = REC_CLAIM.DEC_KEY,
			INSURED_NAME = REC_CLAIM.INSURED_NAME,
			AGENCY_NAME = REC_CLAIM.AGENCY,
			WRITING_COMPANY = REC_CLAIM.WRITING_COMPANY,
			CLAIM_NBR = REC_CLAIM.CLAIM_NBR,
			DATE_OF_LOSS = REC_CLAIM.DATE_OF_LOSS,
			CLAIM_STATUS = REC_CLAIM.CLAIM_STATUS,
			CLAIM_STATUS_DATE = REC_CLAIM.CLAIM_STATUS_DATE
		WHERE CCST_DW_CLAIM = V_CCST_DW_CLAIM;
        V_UCNT := V_UCNT + 1 ;    

        EXCEPTION WHEN NO_DATA_FOUND THEN
            INSERT INTO CCST_DW_CLAIM (
                CLAIM_KEY,
                DEC_KEY,
                INSURED_NAME,
                AGENCY_NAME,
                WRITING_COMPANY,
                CLAIM_NBR,
                SIZE_OF_LOSS,
                DATE_OF_LOSS,
                CLAIM_STATUS,
                CLAIM_STATUS_DATE,
                PUBLICID,
                CREATE_ID,
                FIRST_MODIFIED,
                AUDIT_ID,
                LAST_MODIFIED
            ) VALUES (
                REC_CLAIM.CLAIM_KEY,
                REC_CLAIM.DEC_KEY,
                REC_CLAIM.INSURED_NAME,
                REC_CLAIM.AGENCY,
                REC_CLAIM.WRITING_COMPANY,
                REC_CLAIM.CLAIM_NBR,
                'C', --  SIZE OF_LOSS IS CLAIM_PREFIX I.E, USING 'C' AS HARD CODED VALUE SINCE NO REFERENCE IN CC
                REC_CLAIM.DATE_OF_LOSS,
                REC_CLAIM.CLAIM_STATUS,
                REC_CLAIM.CLAIM_STATUS_DATE,
                REC_CLAIM.PUBLICID,
                REC_CLAIM.CRETEUSERID,
                REC_CLAIM.CREATETIME,
                REC_CLAIM.AUDITID,
                REC_CLAIM.UPDATETIME
            );
            V_ICNT := V_ICNT + 1 ;
            END ;     

           V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
           IF V_COMMIT_COUNT > 999 THEN
           COMMIT;
           V_COMMIT_COUNT := 0;
           END IF;

        END LOOP;
        CLOSE CUR_CC_DW_CLAIM;
        COMMIT;

       	--DBMS_OUTPUT.PUT_LINE('CCST_DW_CLAIM UPDATES: '||V_UCNT||' INSERTS: '||V_ICNT) ;
        
        -- BULK INSERET INTO CC ARCHIVE TABLE
        SP_CCSTA_DW_CLAIM_BINSERT(START_DATE, END_DATE);
        COMMIT;
        
        IF SYSDATE = LAST_DAY(SYSDATE) THEN
            DELETE FROM CCST_DW_CLAIM
            WHERE TRUNC(LAST_MODIFIED) >= TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), - 2) + 1) 
            AND  TRUNC(LAST_MODIFIED) < ADD_MONTHS((LAST_DAY(SYSDATE)+1),-1);
            COMMIT;
        END IF;

   
         -- INSERT INTO DW_CLAIM
        SP_UPDATE_CCST_TO_DW_CLAIM(V_SDATE,V_EDATE);
        COMMIT;
        
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;

END SP_CCST_DW_CLAIM;

PROCEDURE SP_CCST_DW_CLAIMANT (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) IS

	V_ICNT			NUMBER := 0 ;
	V_UCNT			NUMBER := 0 ;
    V_COMMIT_COUNT  NUMBER;
    V_CCST_DW_CLAIMANT NUMBER;
    V_RUN_DATE NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    
  CURSOR CUR_CC_DW_CLAIMANT IS
  WITH INDEPENDENT_ADJUSTERS AS (
     SELECT *
            FROM (
              SELECT 
                SRIA.EXPOSUREGWID AS EXPOSUREID
               ,CASE 
                  WHEN CTIA.NAME IS NOT NULL
                  THEN CTIA.NAME 
                  WHEN CTIA.FIRSTNAME IS NOT NULL 
                   AND CTIA.LASTNAME IS NOT NULL
                  THEN CTIA.LASTNAME || ', ' || CTIA.FIRSTNAME
                  END INDEPENDENT_ADJUSTER
               ,ROW_NUMBER() OVER (PARTITION BY SRIA.EXPOSUREGWID ORDER BY SRIA.ID DESC, SRIA.UPDATETIME DESC) AS SR_ROW_RANK
              FROM CCADMIN.CC_SERVICEREQUEST@ECIG_TO_GWCC_QA_LINK SRIA
              INNER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTIA ON CTIA.ID=SRIA.SPECIALISTID AND CTIA.RETIRED = 0
              INNER JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTIA ON CCTIA.CONTACTID = CTIA.ID AND CTIA.RETIRED = 0
              INNER JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRIA ON CCTRIA.CLAIMCONTACTID = CCTIA.ID AND CCTRIA.RETIRED = 0
              INNER JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID = CCTRIA.ROLE AND TLCCTR.TYPECODE IN ('servicerequestspecialist') AND TLCCTR.RETIRED = 0
                   ) 
            WHERE SR_ROW_RANK < 2 
            ),            
     POLICY_CONTACTS AS(
      SELECT     POLICYID
                ,MAX(AGENCYDOMICILESTATE_EXT) AS AGENCYDOMICILESTATE
                ,MAX(SUBSTR(BUSINESS_NAME,1,78)) AS BUSINESS_NAME
                ,MAX(SUBSTR(DECODE(CTROLE_POLICY_TYPECODE, 'insured', NAME),1,80)) AS INSURED_NAME
      FROM (
                SELECT    CCTRP.POLICYID
                         ,CTP.AGENCYDOMICILESTATE_EXT
                         ,CTP.DOINGBUSINESSAS_EXT AS BUSINESS_NAME
                         ,TLCCTR.TYPECODE AS CTROLE_POLICY_TYPECODE
                         , CASE WHEN CTP.NAME IS NOT NULL
                            THEN CTP.NAME 
                            WHEN CTP.FIRSTNAME IS NOT NULL AND CTP.LASTNAME IS NOT NULL
                            THEN CTP.LASTNAME || ' ' || CTP.FIRSTNAME
                             WHEN CTP.FIRSTNAME IS NOT NULL
                            THEN CTP.FIRSTNAME
                             WHEN CTP.LASTNAME IS NOT NULL
                            THEN CTP.LASTNAME 
                          END NAME  
                FROM CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK C
                LEFT JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK  P ON C.POLICYID = P.ID AND P.RETIRED = 0
                LEFT JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRP ON CCTRP.POLICYID=P.ID  AND CCTRP.RETIRED=0
                LEFT JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID=CCTRP.ROLE AND TLCCTR.TYPECODE IN ('agent','insured') AND TLCCTR.RETIRED=0 -- FOR AGENT
                LEFT JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTP ON  CCTRP.ClaimContactID=CCTP.ID AND CCTP.RETIRED=0
                LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTP ON CTP.ID=CCTP.CONTACTID AND CTP.RETIRED=0)
                GROUP BY POLICYID
            ),            
     ATTORNEY_OPEN AS (
        SELECT *
        FROM   (SELECT
                    TRIM(SUBSTR(CASE
                                  WHEN TLATCT.TYPECODE IN ('LawFirm')
                                  THEN  ATCT.name
                                  WHEN TLATCT.TYPECODE IN ('Attorney')
                                  THEN ATCT.lastname || ', ' || ATCT.firstname
                                  END
                                , 1, 78)) AS ATTORNEY
                   ,TLPC.NAME AS SUIT_TYPE
                   ,CASE 
                      WHEN CM.FINALSETTLEDATE IS NOT NULL OR CM.CLOSEDATE IS NOT NULL
                      THEN 'Closed'
                      ELSE 'Open'
                      END LAWSUIT_STATUS
                   ,ROW_NUMBER() OVER (PARTITION BY CM.CLAIMID ORDER BY CM.ID DESC, CM.UPDATETIME DESC) AS MATTER_ROW_RANK
                   ,CM.CLAIMID AS CLAIM_KEY
        FROM CCADMIN.CC_MATTER@ECIG_TO_GWCC_QA_LINK CM
        LEFT JOIN CCADMIN.CCTL_PRIMARYCAUSETYPE@ECIG_TO_GWCC_QA_LINK TLPC ON TLPC.ID = CM.PrimaryCause   AND TLPC.RETIRED=0
        LEFT JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCR ON CCR.MATTERID = CM.ID AND CCR.ACTIVE=1 AND CCR.RETIRED = 0
        LEFT JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CC ON CC.ID = CCR.ClaimContactID AND CC.RETIRED=0
        LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK ATCT ON ATCT.ID = CC.CONTACTID AND ATCT.RETIRED=0
        LEFT JOIN CCADMIN.CCTL_CONTACT@ECIG_TO_GWCC_QA_LINK TLATCT ON TLATCT.ID = ATCT.SUBTYPE AND TLATCT.RETIRED=0
                                                                     AND TLATCT.TYPECODE IN ('Attorney', 'LawFirm')
        WHERE CASE 
                WHEN CM.FINALSETTLEDATE IS NOT NULL OR CM.CLOSEDATE IS NOT NULL
                THEN 'Closed'
                ELSE 'Open'
                END = 'Open' 
                )
                WHERE  MATTER_ROW_RANK < 2 
        ),

     ATTORNEY AS (
      SELECT *
      FROM ATTORNEY_OPEN
        
        UNION ALL
      
      SELECT *
      FROM (SELECT
                    TRIM(SUBSTR(CASE
                                  WHEN TLATCT.TYPECODE IN ('LawFirm')
                                  THEN  ATCT.name
                                  WHEN TLATCT.TYPECODE IN ('Attorney')
                                  THEN ATCT.lastname || ', ' || ATCT.firstname
                                  END
                                , 1, 78)) AS ATTORNEY
                   ,TLPC.NAME AS SUIT_TYPE 
                   ,CASE 
                      WHEN CM.FINALSETTLEDATE IS NOT NULL OR CM.CLOSEDATE IS NOT NULL
                      THEN 'Closed'
                      ELSE 'Open'
                      END LAWSUIT_STATUS
                   ,ROW_NUMBER() OVER (PARTITION BY CM.CLAIMID ORDER BY CM.ID DESC, CM.UPDATETIME DESC) AS MATTER_ROW_RANK
                   ,CM.CLAIMID AS CLAIM_KEY
        FROM CCADMIN.CC_MATTER@ECIG_TO_GWCC_QA_LINK CM
        LEFT JOIN CCADMIN.CCTL_PRIMARYCAUSETYPE@ECIG_TO_GWCC_QA_LINK TLPC ON TLPC.ID = CM.PrimaryCause   AND TLPC.RETIRED=0
        LEFT JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCR ON CCR.MATTERID = CM.ID AND CCR.ACTIVE=1 AND CCR.RETIRED = 0
        LEFT JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CC ON CC.ID = CCR.ClaimContactID AND CC.RETIRED=0
        LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK ATCT ON ATCT.ID = CC.CONTACTID AND ATCT.RETIRED=0
        LEFT JOIN CCADMIN.CCTL_CONTACT@ECIG_TO_GWCC_QA_LINK TLATCT ON TLATCT.ID = ATCT.SUBTYPE AND TLATCT.RETIRED=0
                                                                     AND TLATCT.TYPECODE IN ('Attorney', 'LawFirm')
                )
                WHERE  MATTER_ROW_RANK < 2 
                  AND CLAIM_KEY NOT IN (SELECT CLAIM_KEY FROM ATTORNEY_OPEN)
        ), 
        TRANSACTION_EXPOSURES AS (
           SELECT DISTINCT EXPOSUREID FROM CCADMIN.CC_TRANSACTION@ECIG_TO_GWCC_QA_LINK
         )
        SELECT 
              P.ID AS POLICY_KEY
             ,C.ID AS CLAIM_KEY
             ,E.CLAIMANTDENORMID AS CLAIMANT_KEY
             ,P.POLICYNUMBER AS POLICY_NBR
             ,PC.INSURED_NAME
             ,P.PRODUCERCODE AS AGENCY_CODE
             ,CO5.NAME AS AGENCY
             ,CO5.AGENCYDOMICILESTATE_EXT AS AGENCYDOMICILESTATE
             ,CUC.NAME AS WRITING_COMPANY
             ,CASE 
                WHEN DP.DEC_POLICY IS NOT NULL
                THEN TO_CHAR(DP.BRANCH_NBR)
                WHEN P.POLICYSYSTEMPERIODID IS NOT NULL
                THEN GR.BRANCHCODE 
                END BRANCH_NBR
             ,CASE 
                WHEN DP.DEC_POLICY IS NOT NULL
                THEN DP.BRANCH_NAME
                WHEN P.POLICYSYSTEMPERIODID IS NOT NULL
                THEN GR.NAME  
                END BRANCH_NAME  
             ,CASE 
                WHEN CBM.GROUP_ID IS NOT NULL
                THEN CASE   
                       WHEN PC.AGENCYDOMICILESTATE IN('CA') THEN CBM.ST_CA
                       WHEN PC.AGENCYDOMICILESTATE  IN('NV') THEN CBM.ST_NV
                       WHEN PC.AGENCYDOMICILESTATE  IN('OR') THEN CBM.ST_OR
                       WHEN PC.AGENCYDOMICILESTATE  IN('AZ') THEN CBM.ST_AZ
                       WHEN PC.AGENCYDOMICILESTATE  IN('WA') THEN CBM.ST_WA
                       WHEN PC.AGENCYDOMICILESTATE  IN('NM') THEN CBM.ST_NM
                       END
                ELSE
                BRN.BRANCH_NBR
                END AS CLAIM_BRANCH_NBR  
             ,CASE 
                WHEN CBM.GROUP_NAME IS NOT NULL
                THEN CBM.GROUP_NAME
                ELSE BRN.BRANCH_NAME
              END AS CLAIM_BRANCH_NAME            
             ,C.CLAIMNUMBER AS CLAIMNUMBER
             ,C.LOSSDATE AS DATE_OF_LOSS
             ,TLCS.NAME AS CLAIM_STATUS
             ,NULL AS SIZE_OF_LOSS  
             ,CCAT.CATASTROPHENUMBER AS CAT_NO
             ,CCAT.DESCRIPTION AS CAT_DESC 
             ,CA.CITY
             ,TLS.TYPECODE AS STATE  
             ,CA.COUNTY
             ,A.LAWSUIT_STATUS
             ,A.SUIT_TYPE
             ,NULL AS REINS_REASON
             ,CASE 
                WHEN CO.NAME IS NOT NULL
                THEN CO.NAME 
                WHEN CO.FIRSTNAME IS NOT NULL 
                 AND CO.LASTNAME IS NOT NULL
                THEN CO.LASTNAME || ', ' || CO.FIRSTNAME
                END AS CLAIMANT_NAME
             ,CASE 
                WHEN CO2.NAME IS NOT NULL
                THEN CO2.NAME 
                WHEN CO2.FIRSTNAME IS NOT NULL 
                 AND CO2.LASTNAME IS NOT NULL
                THEN CO2.LASTNAME || ', ' || CO2.FIRSTNAME
                END AS STAFF_ADJUSTER
             ,CASE 
                WHEN CO3.NAME IS NOT NULL
                THEN CO3.NAME 
                WHEN CO3.FIRSTNAME IS NOT NULL 
                 AND CO3.LASTNAME IS NOT NULL
                THEN CO3.LASTNAME || ', ' || CO3.FIRSTNAME
                END AS STAFF_ADJUSTER_SUPERVISOR
             ,IA.INDEPENDENT_ADJUSTER AS INDEPENDENT_ADJUSTER
             ,NULL AS HOME_SUPERVISOR
             ,WC.COMPANY_NBR AS WRITING_COMPANY_NBR
             ,A.ATTORNEY
             ,PC.BUSINESS_NAME
             ,E.UPDATETIME AS EX_UPDATETIME
             ,CCTP.PUBLICID AS CLAIMANT_CONTACT_PUBLICID
             ,CR.USERNAME AS CREATEUSERID
             ,C.CREATETIME
             ,CRU.USERNAME AS AUDITID
             ,'CC' AS SOURCE
            FROM CCADMIN.CC_EXPOSURE@ECIG_TO_GWCC_QA_LINK E
            LEFT JOIN CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK C ON C.ID = E.CLAIMID AND C.RETIRED = 0
            LEFT JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK P ON P.ID = C.POLICYID AND P.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO ON CO.ID = E.CLAIMANTDENORMID AND CO.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK  U  ON E.CREATEUSERID = U.ID  AND U.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK CR ON CR.ID = U.CREDENTIALID  AND CR.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK  UU  ON E.UPDATEUSERID = UU.ID  AND UU.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK CRU ON CRU.ID = UU.UPDATEUSERID  AND CRU.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U2 ON U2.ID = E.ASSIGNEDUSERID AND U2.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO2 ON CO2.ID = U2.CONTACTID AND CO2.RETIRED = 0
            LEFT JOIN CCADMIN.CC_GROUPUSER@ECIG_TO_GWCC_QA_LINK GU ON GU.USERID = U2.ID AND GU.PRIMARYGROUP_EXT = 1
            LEFT JOIN CCADMIN.CC_GROUP@ECIG_TO_GWCC_QA_LINK G ON G.ID = GU.GROUPID AND G.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U3  ON U3.ID = G.SUPERVISORID AND U3.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO3 ON CO3.ID = U3.CONTACTID AND CO3.RETIRED = 0 
            LEFT JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRP ON CCTRP.POLICYID=P.ID  AND CCTRP.RETIRED=0 
            INNER JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID=CCTRP.ROLE AND TLCCTR.TYPECODE IN ('agent') AND TLCCTR.RETIRED=0 
            LEFT JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTP ON  CCTRP.ClaimContactID=CCTP.ID AND CCTP.RETIRED=0 
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO5 ON CO5.ID=CCTP.CONTACTID AND CO5.RETIRED=0
            LEFT JOIN CCADMIN.CCTL_UNDERWRITINGCOMPANYTYPE@ECIG_TO_GWCC_QA_LINK CUC ON P.UNDERWRITINGCO = CUC.ID AND CUC.RETIRED = 0
            LEFT JOIN WRITING_COMPANY WC ON WC.COMPANY_NAME = CUC.NAME 
            LEFT JOIN DEC_POLICY DP ON DP.DEC_POLICY = P.DECPOLICY_EXT
            LEFT JOIN PC_POLICYPERIOD@ECIG_TO_PC_LINK PP ON PP.ID=P.POLICYSYSTEMPERIODID 
            LEFT JOIN PC_PRODUCERCODE@ECIG_TO_PC_LINK PRC ON PRC.ID=PP.PRODUCERCODEOFRECORDID 
            LEFT JOIN PC_GROUP@ECIG_TO_PC_LINK GR ON GR.ID=PRC.BRANCHID 
            LEFT JOIN CCADMIN.CCTL_CLAIMSTATE@ECIG_TO_GWCC_QA_LINK TLCS ON TLCS.ID = C.STATE AND TLCS.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CATASTROPHE@ECIG_TO_GWCC_QA_LINK CCAT ON C.CATASTROPHEID = CCAT.ID AND CCAT.RETIRED = 0
            LEFT JOIN CCADMIN.CC_ADDRESS@ECIG_TO_GWCC_QA_LINK CA ON CA.ID = C.LOSSLOCATIONID AND CA.RETIRED = 0
            LEFT JOIN CCADMIN.CCTL_STATE@ECIG_TO_GWCC_QA_LINK TLS ON TLS.ID = CA.STATE AND TLS.RETIRED = 0
            LEFT JOIN ATTORNEY A ON A.CLAIM_KEY = C.ID
            LEFT JOIN INDEPENDENT_ADJUSTERS IA ON IA.EXPOSUREID = E.ID
            LEFT JOIN LOGIN_PROFILE  LP ON LOWER(LP.LOGIN_ID) = LOWER(CR.USERNAME)
            LEFT JOIN STAFF  STF ON STF.LOGIN_PROFILE = LP.LOGIN_PROFILE
            LEFT JOIN BRANCH  BRN ON STF.BRANCH = BRN.BRANCH 
            LEFT JOIN CCST_CLAIM_BRANCH_MAPPING CBM ON GU.GROUPID = CBM.GROUP_ID
            LEFT JOIN POLICY_CONTACTS PC ON PC.POLICYID = P.ID
			WHERE E.RETIRED = 0 AND (E.STATE <> 1 OR E.ID IN(SELECT * FROM TRANSACTION_EXPOSURES)) AND E.UPDATETIME >= START_DATE
            ORDER BY E.UPDATETIME
			;
                             
    REC_CLAIMANT CUR_CC_DW_CLAIMANT%ROWTYPE;
    
  BEGIN
   V_SDATE := START_DATE;
   V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
        
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCST_DW_CLAIMANT',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

        COMMIT;
        
    OPEN CUR_CC_DW_CLAIMANT;
        LOOP
            FETCH CUR_CC_DW_CLAIMANT INTO REC_CLAIMANT;
            EXIT WHEN CUR_CC_DW_CLAIMANT%NOTFOUND;
            
           BEGIN 
           SELECT CCST_DW_CLAIMANT
		   INTO V_CCST_DW_CLAIMANT
		   FROM CCST_DW_CLAIMANT
		   WHERE CLAIM_KEY = REC_CLAIMANT.CLAIM_KEY
		   AND CLAIMANT_KEY = REC_CLAIMANT.CLAIMANT_KEY ;
           
           UPDATE CCST_DW_CLAIMANT
		   SET CLAIM_BRANCH_NBR = REC_CLAIMANT.CLAIM_BRANCH_NBR,
			CLAIM_BRANCH_NAME = REC_CLAIMANT.CLAIM_BRANCH_NAME,
			DATE_OF_LOSS = REC_CLAIMANT.DATE_OF_LOSS,
			CLAIM_STATUS = REC_CLAIMANT.CLAIM_STATUS,
            CAT_NBR = REC_CLAIMANT.CAT_NO,
			CAT_DESC = REC_CLAIMANT.CAT_DESC,
			CITY = REC_CLAIMANT.CITY,
			STATE = REC_CLAIMANT.STATE,
			COUNTY = REC_CLAIMANT.COUNTY,
            LAWSUIT_STATUS = REC_CLAIMANT.LAWSUIT_STATUS, -- claimant attorney same as attorney
            SUIT_TYPE = REC_CLAIMANT.SUIT_TYPE,
			REINS_REASON = '', -- I.E, WILL BE EMPTY FOR CC
			CLAIMANT_NAME = REC_CLAIMANT.CLAIMANT_NAME,
			STAFF_ADJUSTER = REC_CLAIMANT.STAFF_ADJUSTER,
			SUPERVISOR = REC_CLAIMANT.STAFF_ADJUSTER_SUPERVISOR,
			IND_ADJUSTER = REC_CLAIMANT.INDEPENDENT_ADJUSTER, --REC_CLAIMANT.IND_ADJUSTER,
			HOME_SUPERVISOR = '', --REC_CLAIMANT.HOME_SUPERVISOR,
			POLICY_KEY = POLICY_KEY,
			POLICY_NBR = REC_CLAIMANT.POLICY_NBR,--POLICY_NBR,
			INSURED_NAME = REC_CLAIMANT.INSURED_NAME,--INSURED_NAME,
			AGENCY_CODE = REC_CLAIMANT.AGENCY_CODE,
			AGENCY_NAME = REC_CLAIMANT.AGENCY,
			AGENCY_STATE = REC_CLAIMANT.AGENCYDOMICILESTATE,
			WRITING_COMPANY = REC_CLAIMANT.WRITING_COMPANY,
			POLICY_BRANCH_NBR =REC_CLAIMANT.BRANCH_NBR, -- REC_CLAIMANT.CLAIM_BRANCH_NBR,
			POLICY_BRANCH_NAME = REC_CLAIMANT.BRANCH_NAME,
			WRITING_COMPANY_NBR = REC_CLAIMANT.WRITING_COMPANY_NBR,--WRITING_COMPANY_NBR,
            ATTORNEY = REC_CLAIMANT.ATTORNEY, 
            BUSINESS_NAME = REC_CLAIMANT.BUSINESS_NAME,
			CLAIM_NBR=REC_CLAIMANT.CLAIMNUMBER
		WHERE CCST_DW_CLAIMANT = V_CCST_DW_CLAIMANT;
		V_UCNT := V_UCNT + 1 ;
        
            EXCEPTION WHEN NO_DATA_FOUND THEN
            INSERT INTO CCST_DW_CLAIMANT (
                POLICY_KEY,
                CLAIM_KEY,
                CLAIMANT_KEY,
                POLICY_NBR,
                INSURED_NAME,
                AGENCY_CODE,
                AGENCY_NAME,
                AGENCY_STATE,
                WRITING_COMPANY,
                POLICY_BRANCH_NBR,
                POLICY_BRANCH_NAME,
                CLAIM_BRANCH_NBR,
                CLAIM_BRANCH_NAME,
                CLAIM_NBR,
                DATE_OF_LOSS,
                CLAIM_STATUS,
            --    SIZE_OF_LOSS,
                CAT_NBR,
                CAT_DESC,
                CITY,
                STATE,
                COUNTY,
                LAWSUIT_STATUS,
                SUIT_TYPE,
                REINS_REASON,
                CLAIMANT_NAME,
                STAFF_ADJUSTER,
                SUPERVISOR,
                IND_ADJUSTER,
                HOME_SUPERVISOR,
                WRITING_COMPANY_NBR,
                ATTORNEY,
                BUSINESS_NAME,
                PUBLICID,
                CREATE_ID,
                FIRST_MODIFIED,
                AUDIT_ID,
                LAST_MODIFIED
            ) VALUES (
                REC_CLAIMANT.POLICY_KEY,
                REC_CLAIMANT.CLAIM_KEY,
                REC_CLAIMANT.CLAIMANT_KEY,
                REC_CLAIMANT.POLICY_NBR,
                REC_CLAIMANT.INSURED_NAME,
                REC_CLAIMANT.AGENCY_CODE,
                REC_CLAIMANT.AGENCY,
                REC_CLAIMANT.AGENCYDOMICILESTATE,
                REC_CLAIMANT.WRITING_COMPANY,
                REC_CLAIMANT.BRANCH_NBR, -- POLICY_BRANCH_NBR 
                REC_CLAIMANT.BRANCH_NAME, -- POLICY_BRANCH_NAME           
                REC_CLAIMANT.CLAIM_BRANCH_NBR, -- CLAIM_BRANCH_NBR                 
                REC_CLAIMANT.CLAIM_BRANCH_NAME, -- CLAIM_BRANCH_NAME 
                REC_CLAIMANT.CLAIMNUMBER,
                REC_CLAIMANT.DATE_OF_LOSS,
                REC_CLAIMANT.CLAIM_STATUS,
--               -- 'C', -- SIZE_OF_LOSS IS CLAIM_PREFIX I.E, USING 'C' AS HARD CODED VALUE SINCE NO REFERENCE IN CC
                REC_CLAIMANT.CAT_NO,
                REC_CLAIMANT.CAT_DESC,
                REC_CLAIMANT.CITY,
                REC_CLAIMANT.STATE,
                REC_CLAIMANT.COUNTY,
                REC_CLAIMANT.LAWSUIT_STATUS, -- LAWSUIT_STATUS IS SUIT_STATUS_DESC
                REC_CLAIMANT.SUIT_TYPE,
                '', -- REINS_REASON
                REC_CLAIMANT.CLAIMANT_NAME,
                REC_CLAIMANT.STAFF_ADJUSTER,
                REC_CLAIMANT.STAFF_ADJUSTER_SUPERVISOR,
                REC_CLAIMANT.INDEPENDENT_ADJUSTER,-- IND_ADJUSTER
                '', -- HOME_SUPERVISOR
                REC_CLAIMANT.WRITING_COMPANY_NBR,
                REC_CLAIMANT.ATTORNEY,
                REC_CLAIMANT.BUSINESS_NAME,
                REC_CLAIMANT.CLAIMANT_CONTACT_PUBLICID,
                REC_CLAIMANT.CREATEUSERID,
                REC_CLAIMANT.CREATETIME,
                REC_CLAIMANT.AUDITID,
                REC_CLAIMANT.EX_UPDATETIME
            );
            V_ICNT := V_ICNT + 1 ;
            END ;  
            
            
           V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
           IF V_COMMIT_COUNT > 999 THEN
           COMMIT;
           V_COMMIT_COUNT := 0;
           END IF;
           
        END LOOP;
        CLOSE CUR_CC_DW_CLAIMANT;
        COMMIT;
          --DBMS_OUTPUT.PUT_LINE('DW_CLAIMANT UPDATES: '||V_UCNT||' INSERTS: '||V_ICNT) ;
          
         -- BULK INSERET INTO CC ARCHIVE TABLE
         SP_CCSTA_DW_CLAIMANT_BINSERT(START_DATE, END_DATE);
         COMMIT;
         
        IF SYSDATE = LAST_DAY(SYSDATE) THEN
            DELETE FROM CCST_DW_CLAIMANT
            WHERE TRUNC(LAST_MODIFIED) >= TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), - 2) + 1) 
            AND  TRUNC(LAST_MODIFIED) < ADD_MONTHS((LAST_DAY(SYSDATE)+1),-1);
            COMMIT;
        END IF;

         -- INSERT INTO DW_CLAIMANT
         SP_UPDATE_CCST_TO_DW_CLAIMANT(V_SDATE,V_EDATE);
         COMMIT;
         
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
END SP_CCST_DW_CLAIMANT;

PROCEDURE SP_CCST_DW_CLAIMANT_DETAIL (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) IS
 
    V_RUN_DATE NUMBER;
    V_COMMIT_COUNT  NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    
    O_CLAIM                CCST_DW_CLAIMANT_DETAIL.CLAIM_KEY%TYPE;
    O_CLAIMANT            CCST_DW_CLAIMANT_DETAIL.CLAIMANT_KEY%TYPE;
    O_CLAIMANT_COVERAGE            CCST_DW_CLAIMANT_DETAIL.CLAIMANT_COVERAGE%TYPE;
    O_CLAIMANT_TRANS            CCST_DW_CLAIMANT_DETAIL.CLAIMANT_TRANS%TYPE;
    O_TRANS_TYPE            CCST_DW_CLAIMANT_DETAIL.TRANS_TYPE%TYPE;
    O_TREATY_CONTRACT        CCST_DW_CLAIMANT_DETAIL.TREATY_CONTRACT_NBR%TYPE;
    O_LOSS_PAID            CCST_DW_CLAIMANT_DETAIL.LOSS_PAID%TYPE;
    O_ALLOC_EXPENSE_PAID        CCST_DW_CLAIMANT_DETAIL.ALLOC_EXPENSE_PAID%TYPE;
    O_UNALLOC_EXPENSE_PAID        CCST_DW_CLAIMANT_DETAIL.UNALLOC_EXPENSE_PAID%TYPE;
    O_LOSS_RESERVE            CCST_DW_CLAIMANT_DETAIL.LOSS_RESERVE%TYPE;
    O_ALLOC_EXPENSE_RESERVE        CCST_DW_CLAIMANT_DETAIL.ALLOC_EXPENSE_RESERVE%TYPE;
    O_UNALLOC_EXPENSE_RESERVE    CCST_DW_CLAIMANT_DETAIL.UNALLOC_EXPENSE_RESERVE%TYPE;
    O_CHECK_NBR                CCST_DW_CLAIMANT_DETAIL.CHECK_NBR%TYPE;
    O_CLAIM_DRAFT_TYPE        CCST_DW_CLAIMANT_DETAIL.CLAIM_DRAFT_TYPE%TYPE;
    O_PAID_AMT                CCST_DW_CLAIMANT_DETAIL.DRAFT_PAID_AMT%TYPE;
    BREASSIGNVARIABLES          NUMBER:= 1;
    BUSENEWLOGIC                NUMBER;

      CURSOR CUR_CCST_DW_CLAIMANT_DETAIL IS
      SELECT *
      FROM   CCST_DW_CLAIMANT_DETAIL
      WHERE TRANS_DATE >= V_SDATE AND TRANS_DATE <= V_EDATE;
 
     CURSOR CUR_CC_DW_CLAIMANT_DETAILS IS
     WITH INDEPENDENT_ADJUSTERS AS (
     SELECT *
            FROM (
              SELECT 
                SRIA.EXPOSUREGWID AS EXPOSUREID
               ,CASE 
                  WHEN CTIA.NAME IS NOT NULL
                  THEN CTIA.NAME 
                  WHEN CTIA.FIRSTNAME IS NOT NULL 
                   AND CTIA.LASTNAME IS NOT NULL
                  THEN CTIA.LASTNAME || ', ' || CTIA.FIRSTNAME
                  END INDEPENDENT_ADJUSTER
               ,ROW_NUMBER() OVER (PARTITION BY SRIA.EXPOSUREGWID ORDER BY SRIA.ID DESC, SRIA.UPDATETIME DESC) AS SR_ROW_RANK
              FROM CCADMIN.CC_SERVICEREQUEST@ECIG_TO_GWCC_QA_LINK SRIA
              INNER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTIA ON CTIA.ID=SRIA.SPECIALISTID AND CTIA.RETIRED = 0
              INNER JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTIA ON CCTIA.CONTACTID = CTIA.ID AND CTIA.RETIRED = 0
              INNER JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRIA ON CCTRIA.CLAIMCONTACTID = CCTIA.ID AND CCTRIA.RETIRED = 0
              INNER JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID = CCTRIA.ROLE AND TLCCTR.TYPECODE IN ('servicerequestspecialist') AND TLCCTR.RETIRED = 0
                   ) 
            WHERE SR_ROW_RANK < 2 
            ), 
            POLICY_CONTACTS AS(
            select POLICYID
            , MAX(AGENCYDOMICILESTATE_EXT) AS AGENCYDOMICILESTATE
            from (
                SELECT    CCTRP.POLICYID
                        , CTP.AGENCYDOMICILESTATE_EXT
                FROM
                CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK C
                LEFT OUTER JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK  P ON C.POLICYID = P.ID AND P.RETIRED = 0
                LEFT JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRP ON CCTRP.POLICYID=P.ID  AND CCTRP.RETIRED=0 -- FOR AGENT
                LEFT JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID=CCTRP.ROLE AND TLCCTR.TYPECODE IN ('agent', 'insured') AND TLCCTR.RETIRED=0 -- FOR AGENT
                LEFT JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTP ON  CCTRP.ClaimContactID=CCTP.ID AND CCTP.RETIRED=0 -- FOR AGENT
                LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTP ON CTP.ID=CCTP.CONTACTID AND CTP.RETIRED=0)
                GROUP BY POLICYID
            ), 
            TRANS_DATE AS (  --GETS UPDATE TIME WHEN TRANSACTION GOES TO SUBMITTED STATUS
            SELECT 
              T."id" AS ID
             ,MIN(T."updatetime") AS TRANS_DATE
             ,'T' AS SOURCE
            FROM DMSADMIN01.CC_TRANSACTION@ECIG_TO_GWCC_QA_LINK T
            WHERE T."status" IN (12,16,17,19,20) 
            GROUP BY T."id"
            
            UNION ALL
            
            SELECT
              RIT."id" AS ID
             ,MIN(RIT."updatetime") AS TRANS_DATE
             ,'RIT' AS SOURCE
            FROM DMSADMIN01.CC_RITRANSACTION@ECIG_TO_GWCC_QA_LINK  RIT
            WHERE RIT."status" IN (12,16,17,18,19,20)
            GROUP BY RIT."id"
            )
            
            SELECT 
              C.ID AS CLAIM_KEY
             ,C.CLAIMNUMBER
             ,CO.ID AS CLAIMANT_KEY
             , VWDN.DEPT_NBR AS DEPT_NBR
             , VWDN.DEPT_DESC AS DEPT_DESC
             ,CASE
                WHEN (TLPT.NAME = 'Businessowners')
                THEN 'Business Owner'
                WHEN (TLPT.NAME = 'Comm/Farm Auto')
                THEN CASE 
                       WHEN (P.POLICYNUMBER LIKE '%FAA%' 
                          OR P.POLICYNUMBER LIKE '%SAA%'  
                          OR P.POLICYNUMBER LIKE '%GAA%')
                       THEN 'Farm Auto'
                       ELSE 'Commercial Auto'
                       END
                WHEN (TLPT.NAME = 'Farmowners')
                THEN 'Farm'
                WHEN (TLPT.NAME = 'Commercial Manual')
                THEN 'Manual'      
                WHEN (TLPT.NAME = 'Homeowners')
                THEN 'Homeowner' 
                WHEN (TLPT.NAME = 'Personal Auto')
                THEN 'Personal Automobile' 
                WHEN (TLPT.NAME = 'Personal Excess')
                THEN 'Personal Umbrella' 
                ELSE TLPT.NAME
                END AS BUSINESS_LINE_NAME
             ,CASE
                WHEN TLPT.NAME IN ('Businessowners', 'Commercial Umbrella', 'Commercial Manual')
                THEN 'Commercial'
                WHEN TLPT.NAME IN ('Homeowners', 'Personal Excess', 'Dwelling Fire')
                THEN 'Personal'
				WHEN TLPT.NAME IN ('Personal Auto')
                THEN 'Auto'
                WHEN TLPT.NAME IN ('Farm Umbrella', 'Farmowners')
                THEN 'Farm'                    
                WHEN (TLPT.NAME = 'Comm/Farm Auto')
                THEN CASE 
                       WHEN (P.POLICYNUMBER LIKE '%FAA%' 
                          OR P.POLICYNUMBER LIKE '%SAA%'  
                          OR P.POLICYNUMBER LIKE '%GAA%')
                       THEN 'Farm'
                       ELSE 'Commercial'
                       END
                END AS MAJOR_LINE_NAME
             ,CASE 
                WHEN ASCL.LINE_NBR IS NULL
                THEN COV.LINENUMBER_EXT
                ELSE ASCL.LINE_NBR
                END AS COVERAGE_LINE_NBR   
             ,CASE
                WHEN ASCL.COVERAGE_LINE_DESC IS NOT NULL
                THEN ASCL.COVERAGE_LINE_DESC
                ELSE ASCLPC.COVERAGE_LINE_DESC
                END AS COVERAGE_LINE_DESC
             ,CASE
                WHEN ASL.A_S_LINE_NBR IS NULL
                THEN ASLPC.A_S_LINE_NBR
                ELSE ASL.A_S_LINE_NBR
                END AS A_S_LINE_NBR
             ,CASE 
                WHEN ASL.A_S_LINE_DESC IS NULL
                THEN ASLPC.A_S_LINE_DESC
                ELSE ASL.A_S_LINE_DESC
                END AS A_S_LINE_DESC
             ,WHOUSE.GET_CAUSE_OF_LOSS(E.ID) AS CAUSE_OF_LOSS
             ,CASE 
                 WHEN TLLPTY.TYPECODE = 'insured'
                  THEN '1st Party Property' 
                 ELSE '3rd Party Casualty'
               END AS CAUSE_GROUP 
             ,VWEC.EXPENSE_CODE AS EXPENSE_CODE
             ,NULL AS TREATY_CONTRACT_NBR
             ,CASE 
                WHEN TD.TRANS_DATE IS NULL
                THEN T.CREATETIME
                ELSE TD.TRANS_DATE 
                END AS TRANS_DATE
             ,WHOUSE.GET_TRANS_TYPE(T.ID,'CC') AS TRANS_TYPE                     -- placeholder for trans type function
             ,CASE 
                WHEN TLT.NAME = 'Payment' AND TLCT.NAME = 'Claim Cost'
                THEN NVL(TLI.TRANSACTIONAMOUNT,0)
                WHEN TLT.NAME = 'Recovery' AND TLCT.NAME = 'Claim Cost'
                THEN -tli.transactionamount
                ELSE 0
                END AS loss_paid
             ,CASE
                WHEN TLT.NAME = 'Payment' AND TLCT.NAME = 'Expense - A&O'
                THEN TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'Recovery'  AND TLCT.NAME = 'Expense - A&O'
                THEN -TLI.TRANSACTIONAMOUNT
                ELSE 0
                END AS UNALLOC_EXPENSE_PAID
             ,CASE
                WHEN TLT.NAME = 'Payment'  AND TLCT.NAME = 'Expense - D&CC'
                THEN TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'Recovery' AND TLCT.NAME = 'Expense - D&CC'
                THEN -TLI.TRANSACTIONAMOUNT
                ELSE 0
                END AS ALLOC_EXPENSE_PAID    
             ,CASE 
                WHEN TLT.NAME = 'Reserve' AND TLCT.NAME = 'Claim Cost'
                THEN TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'RecoveryReserve' AND TLCT.NAME = 'Claim Cost'
                THEN -TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'Payment'  AND TLPMT.NAME = 'Supplement'
                 AND TLCT.NAME = 'Claim Cost' THEN TLI.TRANSACTIONAMOUNT
                ELSE 0
                END AS LOSS_RESERVE
             ,CASE
                WHEN TLT.NAME = 'Reserve' AND TLCT.NAME = 'Expense - A&O'
                THEN TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'RecoveryReserve' AND TLCT.NAME = 'Expense - A&O'
                THEN -TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'Payment' AND TLPMT.NAME = 'Supplement'
                 AND TLCT.NAME = 'Expense - A&O' THEN TLI.TRANSACTIONAMOUNT
                ELSE 0
                END AS UNALLOC_EXPENSE_RESERVE
             ,CASE
                WHEN TLT.NAME = 'Reserve' AND TLCT.NAME = 'Expense - D&CC'
                THEN TLI.TRANSACTIONAMOUNT
                WHEN tlt.name = 'RecoveryReserve' AND TLCT.NAME = 'Expense - D&CC'
                THEN -TLI.TRANSACTIONAMOUNT
                WHEN TLT.NAME = 'Payment'  AND TLPMT.NAME = 'Supplement'
                 AND TLCT.NAME = 'Expense - D&CC'  THEN TLI.TRANSACTIONAMOUNT
                ELSE 0
                END AS ALLOC_EXPENSE_RESERVE   
             ,0 AS CEDED_LOSS_PAID
             ,0 AS CEDED_EXPENSE_PAID
             ,0 AS CEDED_LOSS_RESERVE
             ,0 AS CEDED_EXPENSE_RESERVE
             ,CH.CHECKNUMBER AS CHECK_NBR
             ,CR.USERNAME AS OPERATOR_ID
             ,TLPM.NAME AS CLAIM_DRAFT_TYPE
             ,NULL AS DRAFT_PAID_AMT
             ,0 AS CEDED_ULAE_PAID
             ,0 AS CEDED_ULAE_RESERVE             
             ,E.ID AS CLAIMANT_COVERAGE
             ,TLI.ID AS CLAIMANT_TRANS
             ,CASE 
                WHEN CO2.NAME IS NOT NULL
                THEN CO2.NAME 
                WHEN CO2.FIRSTNAME IS NOT NULL 
                 AND CO2.LASTNAME IS NOT NULL
                THEN CO2.LASTNAME || ', ' || CO2.FIRSTNAME
                END AS STAFF_ADJUSTER
             ,CASE 
                WHEN CO3.NAME IS NOT NULL
                THEN CO3.NAME 
                WHEN CO3.FIRSTNAME IS NOT NULL 
                 AND CO3.LASTNAME IS NOT NULL
                THEN CO3.LASTNAME || ', ' || CO3.FIRSTNAME
                END AS ADJUSTER_SUPERVISOR
             ,IA.INDEPENDENT_ADJUSTER AS INDEPENDENT_ADJUSTER
             ,CASE 
                WHEN CBM.GROUP_ID IS NOT NULL
                THEN CASE   
                      WHEN PC.AGENCYDOMICILESTATE IN('CA') THEN CBM.ST_CA
                      WHEN PC.AGENCYDOMICILESTATE  IN('NV') THEN CBM.ST_NV
                      WHEN PC.AGENCYDOMICILESTATE  IN('OR') THEN CBM.ST_OR
                      WHEN PC.AGENCYDOMICILESTATE  IN('AZ') THEN CBM.ST_AZ
                      WHEN PC.AGENCYDOMICILESTATE  IN('WA') THEN CBM.ST_WA
                      WHEN PC.AGENCYDOMICILESTATE  IN('NM') THEN CBM.ST_NM
                END
                ELSE
                   BRN.BRANCH_NBR
                END AS STAFF_ADJ_BRANCH_NUMBER  
             ,CASE 
                WHEN CBM.GROUP_NAME IS NOT NULL
                THEN CBM.GROUP_NAME
                ELSE BRN.BRANCH_NAME
              END AS STAFF_ADJ_BRANCH_NAME
             , E.PUBLICID
             , CR.USERNAME AS CREATEUSERID
             , C.CREATETIME
             , UUCR.USERNAME  AS AUDITID   
             ,'CC' AS SOURCE
             ,E.UPDATETIME AS EX_UPDATETIME
             ,C.UPDATETIME AS CL_UPDATETIME
            FROM CCADMIN.CC_TRANSACTION@ECIG_TO_GWCC_QA_LINK T
            LEFT JOIN CCADMIN.CC_TRANSACTIONLINEITEM@ECIG_TO_GWCC_QA_LINK  TLI ON TLI.TRANSACTIONID = T.ID AND TLI.RETIRED = 0
            LEFT JOIN CCADMIN.CCTL_PAYMENTTYPE@ECIG_TO_GWCC_QA_LINK TLPMT ON TLPMT.ID = T.PAYMENTTYPE
            LEFT JOIN CCADMIN.CC_EXPOSURE@ECIG_TO_GWCC_QA_LINK E ON E.ID = T.EXPOSUREID AND E.RETIRED = 0
            LEFT JOIN CCADMIN.CCTL_LOSSPARTYTYPE@ECIG_TO_GWCC_PRD_LINK TLLPTY on TLLPTY.ID = E.LOSSPARTY 
            LEFT JOIN CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK C ON C.ID = NVL(E.CLAIMID,T.CLAIMID) AND C.RETIRED = 0
            LEFT JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK P ON P.ID = C.POLICYID AND P.RETIRED = 0
            LEFT JOIN WHOUSE.VW_DEPTNUMBER VWDN ON VWDN.POLICYID = P.ID
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK  CO ON CO.ID = E.CLAIMANTDENORMID AND CO.RETIRED = 0
            LEFT JOIN CCADMIN.CCX_POLICYDEPARTMENT_EXT@ECIG_TO_GWCC_QA_LINK  PD ON P.POLICYDEPARTMENT_EXTID = PD.ID AND PD.RETIRED = 0 
            LEFT JOIN CCADMIN.CCTL_POLICYTYPE@ECIG_TO_GWCC_QA_LINK TLPT ON TLPT.ID = P.POLICYTYPE
            LEFT JOIN CCADMIN.CC_COVERAGE@ECIG_TO_GWCC_QA_LINK COV ON COV.ID = E.COVERAGEID AND COV.RETIRED = 0
            LEFT JOIN WHOUSE.CC_A_S_COVERAGE_LINE CCASCL ON CCASCL.COVERAGE_TYPE = E.PRIMARYCOVERAGE AND CCASCL.LINE_NBR = COV.LINENUMBER_EXT
            LEFT JOIN A_S_COVERAGE_LINE ASCL ON ASCL.A_S_COVERAGE_LINE = COV.ASCOVERAGELINE_EXT
            LEFT JOIN A_S_COVERAGE_LINE ASCLPC ON ASCLPC.A_S_COVERAGE_LINE = CCASCL.A_S_COVERAGE_LINE
            LEFT JOIN A_S_LINE ASL ON ASL.A_S_LINE = ASCL.A_S_LINE
            LEFT JOIN A_S_LINE  ASLPC ON ASLPC.A_S_LINE = ASCLPC.A_S_LINE
            LEFT JOIN WHOUSE.VW_EXPENSECODE VWEC ON VWEC.COSTCATEGORY = T.COSTCATEGORY 
            LEFT JOIN CCADMIN.CCTL_TRANSACTION@ECIG_TO_GWCC_QA_LINK TLT ON TLT.ID = T.SUBTYPE
            LEFT JOIN CCADMIN.CCTL_COSTTYPE@ECIG_TO_GWCC_QA_LINK TLCT ON TLCT.ID = T.COSTTYPE
            LEFT JOIN CCADMIN.CC_CHECK@ECIG_TO_GWCC_QA_LINK CH ON CH.ID = T.CHECKID AND CH.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK  U  ON T.CREATEUSERID = U.ID  AND U.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK CR ON CR.ID = U.CREDENTIALID  AND CR.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK  UU ON T.UPDATEUSERID = UU.ID AND UU.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK  UUCR  ON UUCR.ID = UU.UPDATEUSERID AND UUCR.RETIRED = 0
            LEFT JOIN CCADMIN.CCTL_PAYMENTMETHOD@ECIG_TO_GWCC_QA_LINK  TLPM ON TLPM.ID = CH.PAYMENTMETHOD  AND TLPM.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U2 ON U2.ID = E.ASSIGNEDUSERID AND U2.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO2 ON CO2.ID = U2.CONTACTID AND CO2.RETIRED = 0
            LEFT JOIN CCADMIN.CC_GROUPUSER@ECIG_TO_GWCC_QA_LINK GU ON GU.USERID = U2.ID AND GU.PRIMARYGROUP_EXT = 1
            LEFT JOIN CCADMIN.CC_GROUP@ECIG_TO_GWCC_QA_LINK G ON G.ID = GU.GROUPID AND G.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U3  ON U3.ID = G.SUPERVISORID AND U3.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO3 ON CO3.ID = U3.CONTACTID AND CO3.RETIRED = 0 
            LEFT JOIN INDEPENDENT_ADJUSTERS IA ON IA.EXPOSUREID = E.ID
            LEFT JOIN TRANS_DATE TD ON TD.ID = T.ID  AND TD.SOURCE = 'T'
            LEFT JOIN LOGIN_PROFILE  LP ON LOWER(LP.LOGIN_ID) = LOWER(CR.USERNAME)
            LEFT JOIN STAFF  STF ON STF.LOGIN_PROFILE = LP.LOGIN_PROFILE
            LEFT JOIN BRANCH  BRN ON STF.BRANCH = BRN.BRANCH 
            LEFT OUTER JOIN CCST_CLAIM_BRANCH_MAPPING CBM ON GU.GROUPID = CBM.GROUP_ID
            LEFT JOIN POLICY_CONTACTS PC ON PC.POLICYID = P.ID
            WHERE T.RETIRED = 0  AND T.STATUS IN (12,16,17,19,20) 
			--AND (TD.TRANS_DATE >= START_DATE)  OR E.UPDATETIME >= START_DATE OR C.UPDATETIME >= START_DATE
			AND (CASE WHEN TD.TRANS_DATE IS NULL THEN T.CREATETIME ELSE TD.TRANS_DATE END >= START_DATE)

            
            UNION ALL
            
            SELECT 
              C.ID AS CLAIM_KEY
             ,C.CLAIMNUMBER  
             ,CO.ID AS CLAIMANT_KEY
             , VWDN.DEPT_NBR AS DEPT_NBR
             , VWDN.DEPT_DESC AS DEPT_DESC
             ,CASE
                WHEN (TLPT.NAME = 'Businessowners')
                THEN 'Business Owner'
                WHEN (TLPT.NAME = 'Comm/Farm Auto')
                THEN CASE 
                       WHEN (P.POLICYNUMBER LIKE '%FAA%' 
                          OR P.POLICYNUMBER LIKE '%SAA%'  
                          OR P.POLICYNUMBER LIKE '%GAA%')
                       THEN 'Farm Auto'
                       ELSE 'Commercial Auto'
                       END
                WHEN (TLPT.NAME = 'Farmowners')
                THEN 'Farm'
                WHEN (TLPT.NAME = 'Commercial Manual')
                THEN 'Manual'      
                WHEN (TLPT.NAME = 'Homeowners')
                THEN 'Homeowner' 
                WHEN (TLPT.NAME = 'Personal Auto')
                THEN 'Personal Automobile' 
                WHEN (TLPT.NAME = 'Personal Excess')
                THEN 'Personal Umbrella' 
                ELSE TLPT.NAME
                END AS BUSINESS_LINE_NAME
             ,CASE
                WHEN TLPT.NAME IN ('Businessowners', 'Commercial Umbrella', 'Commercial Manual')
                THEN 'Commercial'
                WHEN TLPT.NAME IN ('Homeowners', 'Personal Excess', 'Dwelling Fire')
                THEN 'Personal'
				 WHEN TLPT.NAME IN ('Personal Auto')
                THEN 'Auto'
                WHEN TLPT.NAME IN ('Farm Umbrella', 'Farmowners')
                THEN 'Farm'                    
                WHEN (TLPT.NAME = 'Comm/Farm Auto')
                THEN CASE 
                       WHEN (P.POLICYNUMBER LIKE '%FAA%' 
                          OR P.POLICYNUMBER LIKE '%SAA%'  
                          OR P.POLICYNUMBER LIKE '%GAA%')
                       THEN 'Farm'
                       ELSE 'Commercial'
                       END
                END AS MAJOR_LINE_NAME
             ,CASE 
                WHEN ASCL.LINE_NBR IS NULL
                THEN COV.LINENUMBER_EXT
                ELSE ASCL.LINE_NBR
                END AS COVERAGE_LINE_NBR   
             ,CASE
                WHEN ASCL.COVERAGE_LINE_DESC IS NOT NULL
                THEN ASCL.COVERAGE_LINE_DESC
                ELSE ASCLPC.COVERAGE_LINE_DESC
                END AS COVERAGE_LINE_DESC
             ,CASE
                WHEN ASL.A_S_LINE_NBR IS NULL
                THEN ASLPC.A_S_LINE_NBR
                ELSE ASL.A_S_LINE_NBR
                END AS A_S_LINE_NBR
             ,CASE 
                WHEN ASL.A_S_LINE_DESC IS NULL
                THEN ASLPC.A_S_LINE_DESC
                ELSE ASL.A_S_LINE_DESC
                END AS A_S_LINE_DESC
             ,WHOUSE.GET_CAUSE_OF_LOSS(E.ID) AS CAUSE_OF_LOSS
             ,CASE 
                WHEN TLLPTY.TYPECODE = 'insured'
                  THEN '1st Party Property' 
                ELSE '3rd Party Casualty'
              END AS CAUSE_GROUP
             ,VWEC.EXPENSE_CODE AS EXPENSE_CODE
             ,RIA.AGREEMENTNUMBER AS TREATY_CONTRACT_NBR
             ,CASE 
                WHEN TD.TRANS_DATE IS NULL
                THEN RIT.CREATETIME
                ELSE TD.TRANS_DATE 
                END AS TRANS_DATE             
             ,CASE
                  WHEN TLRIT.name = 'RIRecoverable'
                  THEN 'Reinsurance Recoverable'
                  WHEN TLRIT.name = 'RICededReserve'
                  THEN 'Reinsurance Reserve'
               ELSE TLRIT.name
              END AS TRANS_TYPE
             ,0 AS LOSS_PAID
             ,0 AS UNALLOC_EXPENSE_PAID
             ,0 AS ALLOC_EXPENSE_PAID    
             ,0 AS LOSS_RESERVE
             ,0 AS UNALLOC_EXPENSE_RESERVE
             ,0 AS ALLOC_EXPENSE_RESERVE   
             ,CASE
                WHEN TLRIT.NAME = 'RIRecoverable' AND TLCT.NAME = 'Claim Cost'
                THEN RIT.CLAIMAMOUNT
                ELSE 0
                END AS CEDED_LOSS_PAID
             ,CASE
                WHEN TLRIT.NAME = 'RIRecoverable'  AND TLCT.NAME = 'Expense - D&CC'
                THEN RIT.CLAIMAMOUNT
                ELSE 0
                END AS CEDED_EXPENSE_PAID
             ,CASE
                WHEN TLRIT.NAME = 'RICededReserve' AND TLCT.NAME = 'Claim Cost'
                THEN RIT.CLAIMAMOUNT
                ELSE 0
                END AS CEDED_LOSS_RESERVE
             ,CASE
                WHEN TLRIT.NAME = 'RICededReserve'  AND TLCT.NAME = 'Expense - D&CC'
                THEN RIT.CLAIMAMOUNT
                ELSE 0
                END AS CEDED_EXPENSE_RESERVE
             ,NULL AS CHECK_NBR
             ,CR.USERNAME AS OPERATOR_ID
             ,NULL AS CLAIM_DRAFT_TYPE
             ,NULL AS DRAFT_PAID_AMT
             ,CASE
                WHEN TLRIT.NAME = 'RIRecoverable' AND TLCT.NAME = 'Expense - A&O'
                THEN RIT.CLAIMAMOUNT
                ELSE 0
                END AS CEDED_ULAE_PAID
             ,CASE
                WHEN TLRIT.NAME = 'RICededReserve' AND TLCT.NAME = 'Expense - A&O'
                THEN RIT.CLAIMAMOUNT
                ELSE 0
                END AS CEDED_ULAE_RESERVE             
             ,E.ID AS CLAIMANT_COVERAGE
             ,RIT.ID AS CLAIMANT_TRANS
             ,CASE 
                WHEN CO2.NAME IS NOT NULL
                THEN CO2.NAME 
                WHEN CO2.FIRSTNAME IS NOT NULL 
                 AND CO2.LASTNAME IS NOT NULL
                THEN CO2.LASTNAME || ', ' || CO2.FIRSTNAME
                END AS STAFF_ADJUSTER
             ,CASE 
                WHEN CO3.NAME IS NOT NULL
                THEN CO3.NAME 
                WHEN CO3.FIRSTNAME IS NOT NULL 
                 AND CO3.LASTNAME IS NOT NULL
                THEN CO3.LASTNAME || ', ' || CO3.FIRSTNAME
                END AS ADJUSTER_SUPERVISOR
             ,IA.INDEPENDENT_ADJUSTER AS INDEPENDENT_ADJUSTER
             ,CASE 
                WHEN CBM.GROUP_ID IS NOT NULL
                THEN CASE   
                      WHEN PC.AGENCYDOMICILESTATE IN('CA') THEN CBM.ST_CA
                      WHEN PC.AGENCYDOMICILESTATE  IN('NV') THEN CBM.ST_NV
                      WHEN PC.AGENCYDOMICILESTATE  IN('OR') THEN CBM.ST_OR
                      WHEN PC.AGENCYDOMICILESTATE  IN('AZ') THEN CBM.ST_AZ
                      WHEN PC.AGENCYDOMICILESTATE  IN('WA') THEN CBM.ST_WA
                      WHEN PC.AGENCYDOMICILESTATE  IN('NM') THEN CBM.ST_NM
                END
                ELSE
                   BRN.BRANCH_NBR
                END AS STAFF_ADJ_BRANCH_NUMBER  
             ,CASE 
                WHEN CBM.GROUP_NAME IS NOT NULL
                THEN CBM.GROUP_NAME
                ELSE BRN.BRANCH_NAME
              END AS STAFF_ADJ_BRANCH_NAME
             , E.PUBLICID
             , CR.USERNAME AS CREATEUSERID
             , C.CREATETIME
             ,'' AS AUDITID
             ,'CC' AS SOURCE
             ,E.UPDATETIME AS EX_UPDATETIME
             ,C.UPDATETIME AS CL_UPDATETIME
            FROM CCADMIN.CC_RITRANSACTION@ECIG_TO_GWCC_QA_LINK  RIT
            LEFT JOIN CCADMIN.CC_EXPOSURE@ECIG_TO_GWCC_QA_LINK E ON E.ID = RIT.EXPOSUREID AND E.RETIRED = 0
            LEFT JOIN CCADMIN.CCTL_LOSSPARTYTYPE@ECIG_TO_GWCC_PRD_LINK TLLPTY on TLLPTY.ID = E.LOSSPARTY 
            LEFT JOIN CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK  C ON C.ID = NVL(E.CLAIMID,RIT.CLAIMID) AND C.RETIRED = 0
            LEFT JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK  P ON P.ID = C.POLICYID AND P.RETIRED = 0
            LEFT JOIN WHOUSE.VW_DEPTNUMBER VWDN ON VWDN.POLICYID = P.ID
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO ON CO.ID = E.CLAIMANTDENORMID AND CO.RETIRED = 0
            LEFT JOIN CCADMIN.CCX_POLICYDEPARTMENT_EXT@ECIG_TO_GWCC_QA_LINK PD ON P.POLICYDEPARTMENT_EXTID = PD.ID AND PD.RETIRED = 0 
            LEFT JOIN CCADMIN.CCTL_POLICYTYPE@ECIG_TO_GWCC_QA_LINK TLPT ON TLPT.ID = P.POLICYTYPE
            LEFT JOIN CCADMIN.CC_COVERAGE@ECIG_TO_GWCC_QA_LINK COV ON COV.ID = E.COVERAGEID AND COV.RETIRED = 0
            LEFT JOIN WHOUSE.CC_A_S_COVERAGE_LINE  CCASCL ON CCASCL.COVERAGE_TYPE = E.PRIMARYCOVERAGE AND CCASCL.LINE_NBR = COV.LINENUMBER_EXT
            LEFT JOIN A_S_COVERAGE_LINE ASCL ON ASCL.A_S_COVERAGE_LINE = COV.ASCOVERAGELINE_EXT
            LEFT JOIN A_S_COVERAGE_LINE ASCLPC ON ASCLPC.A_S_COVERAGE_LINE = CCASCL.A_S_COVERAGE_LINE
            LEFT JOIN A_S_LINE ASL ON ASL.A_S_LINE = ASCL.A_S_LINE
            LEFT JOIN A_S_LINE ASLPC ON ASLPC.A_S_LINE = ASCLPC.A_S_LINE
            LEFT JOIN WHOUSE.VW_EXPENSECODE VWEC ON VWEC.COSTCATEGORY = RIT.COSTCATEGORY 
            LEFT JOIN CCADMIN.CCTL_TRANSACTION@ECIG_TO_GWCC_QA_LINK TLT ON TLT.ID = RIT.SUBTYPE
            LEFT JOIN CCADMIN.CCTL_COSTTYPE@ECIG_TO_GWCC_QA_LINK TLCT ON TLCT.ID = RIT.COSTTYPE
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U  ON RIT.CREATEUSERID = U.ID AND U.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK CR ON CR.ID = U.CREDENTIALID AND CR.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U2 ON U2.ID = E.ASSIGNEDUSERID AND U2.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO2 ON CO2.ID = U2.CONTACTID AND CO2.RETIRED = 0
            LEFT JOIN CCADMIN.CC_GROUPUSER@ECIG_TO_GWCC_QA_LINK GU ON GU.USERID = U2.ID AND GU.PRIMARYGROUP_EXT = 1
            LEFT JOIN CCADMIN.CC_GROUP@ECIG_TO_GWCC_QA_LINK G ON G.ID = GU.GROUPID AND G.RETIRED = 0
            LEFT JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK U3 ON U3.ID = G.SUPERVISORID AND U3.RETIRED = 0
            LEFT JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CO3 ON CO3.ID = U3.CONTACTID AND CO3.RETIRED = 0 
            LEFT JOIN INDEPENDENT_ADJUSTERS IA ON IA.EXPOSUREID = E.ID
            LEFT JOIN CCADMIN.CCTL_RITRANSACTION@ECIG_TO_GWCC_QA_LINK TLRIT ON TLRIT.ID = RIT.SUBTYPE
            LEFT JOIN CCADMIN.CC_RIAGREEMENT@ECIG_TO_GWCC_QA_LINK RIA  ON RIA.ID = RIT.RIAGREEMENT
            LEFT JOIN TRANS_DATE TD ON TD.ID = RIT.ID AND TD.SOURCE = 'RIT'
            LEFT JOIN LOGIN_PROFILE  LP ON LOWER(LP.LOGIN_ID) = LOWER(CR.USERNAME)
            LEFT JOIN STAFF  STF ON STF.LOGIN_PROFILE = LP.LOGIN_PROFILE
            LEFT JOIN BRANCH  BRN ON STF.BRANCH = BRN.BRANCH 
            LEFT OUTER JOIN CCST_CLAIM_BRANCH_MAPPING CBM ON GU.GROUPID = CBM.GROUP_ID
            LEFT JOIN POLICY_CONTACTS PC ON PC.POLICYID = P.ID
            WHERE RIT.RETIRED = 0  AND RIT.STATUS IN (12,16,17,18,19,20)
            --AND (TD.TRANS_DATE >= START_DATE)  OR E.UPDATETIME >= START_DATE OR C.UPDATETIME >= START_DATE
			AND (CASE WHEN TD.TRANS_DATE IS NULL THEN RIT.CREATETIME ELSE TD.TRANS_DATE END >= START_DATE)
            ;

        REC_CLAIMANT_DETAILS CUR_CC_DW_CLAIMANT_DETAILS%ROWTYPE;
    BEGIN
      V_SDATE := START_DATE;
      V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
        
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCST_DW_CLAIMANT_DETAIL',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

        COMMIT;
          
        -- DELETE THE RECORDS FROM CCST_DW_CLAIMANT_DETAIL WHICH HAVE THE TRANS_DATE BETWEEN THE START DATE AND END DATE.
        BEGIN
            FOR V_DW_CLAIMANT_DETAIL IN CUR_CCST_DW_CLAIMANT_DETAIL LOOP
             --    DBMS_OUTPUT.PUT_LINE('DELETING INSIDE CLAIMANT DETAILS');
              DELETE FROM CCST_DW_CLAIMANT_DETAIL
              WHERE  CCST_DW_CLAIMANT_DETAIL = V_DW_CLAIMANT_DETAIL.CCST_DW_CLAIMANT_DETAIL;
              V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
              IF V_COMMIT_COUNT > 999 THEN
                 COMMIT;
                 V_COMMIT_COUNT := 0;
               END IF;
           END LOOP;
           COMMIT;
       END;
       
        BEGIN
        OPEN CUR_CC_DW_CLAIMANT_DETAILS;
        LOOP
            FETCH CUR_CC_DW_CLAIMANT_DETAILS INTO REC_CLAIMANT_DETAILS;
            EXIT WHEN CUR_CC_DW_CLAIMANT_DETAILS%NOTFOUND;
            
           --IF REC_CLAIMANT_DETAILS.TRANS_TYPE IN('Credit Salvage', 'Credit Subro', 'Credit Other') THEN
           --     REC_CLAIMANT_DETAILS.LOSS_RESERVE := REC_CLAIMANT_DETAILS.LOSS_PAID;
           --     REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_RESERVE := REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_PAID; 
           --     REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_RESERVE := REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_PAID;
           -- END IF;
             
            BUSENEWLOGIC := 1;
            IF BUSENEWLOGIC = 1 THEN

            --DBMS_OUTPUT.PUT_LINE ( 'OLD VARS     '||' O_CLAIM '||O_CLAIM||' O_CLAIMANT '||O_CLAIMANT||' O_CLAIMANT_COVERAGE '||O_CLAIMANT_COVERAGE||' O_CLAIMANT_TRANS '||O_CLAIMANT_TRANS );
            --DBMS_OUTPUT.PUT_LINE ( 'CURRENT VARS '||' V_CLAIM '||V_CLAIM||' V_CLAIMANT '||V_CLAIMANT||' V_CLAIMANT_COVERAGE '||V_CLAIMANT_COVERAGE||' V_CLAIMANT_TRANS '||V_CLAIMANT_TRANS );
            --DBMS_OUTPUT.PUT_LINE ( '||');

            --WHEN EACH RECORD IS  BEING READ, MAKE A COPY OF THEM. THESE VARIABLES WILL BE USED TO DO COMPARISON OF
            --RECORDS TO SUPPRESS CERTAIN AMOUNTS.

            IF BREASSIGNVARIABLES = 1 OR
            (O_CLAIM <> REC_CLAIMANT_DETAILS.CLAIM_KEY) OR
                (O_CLAIMANT <> REC_CLAIMANT_DETAILS.CLAIMANT_KEY) OR
                (O_CLAIMANT_COVERAGE <> REC_CLAIMANT_DETAILS.CLAIMANT_COVERAGE) OR
                (O_CLAIMANT_TRANS  <> REC_CLAIMANT_DETAILS.CLAIMANT_TRANS)
            THEN

                --DBMS_OUTPUT.PUT_LINE ( '************ REASSIGNING VARIABLES ************** ' );

                --THE CONDITION IN THE OR CLAUSE--IF CLAIM, CLAIMANT, CLAIMANT_COVERAGE AND CLAIMANT_TRANS KEY ARE DIFFERENT.
                --THEN THE CURSOR HAS FETCHED A DIFFERENT RECORD, WE NEED TO REASSIGN THE O_* VARIABLES TO MATCH THIS NEW SET OF VARIABLES.

                O_CLAIM                     := REC_CLAIMANT_DETAILS.CLAIM_KEY; 
                O_CLAIMANT                  := REC_CLAIMANT_DETAILS.CLAIMANT_KEY;
                O_CLAIMANT_COVERAGE         := REC_CLAIMANT_DETAILS.CLAIMANT_COVERAGE; 
                O_CLAIMANT_TRANS            := REC_CLAIMANT_DETAILS.CLAIMANT_TRANS; 
                O_TRANS_TYPE                := REC_CLAIMANT_DETAILS.TRANS_TYPE; 
                O_TREATY_CONTRACT           := REC_CLAIMANT_DETAILS.TREATY_CONTRACT_NBR;
                O_LOSS_PAID                 := REC_CLAIMANT_DETAILS.LOSS_PAID;
                O_ALLOC_EXPENSE_PAID        := REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_PAID;
                O_UNALLOC_EXPENSE_PAID      := REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_PAID;
                O_LOSS_RESERVE              := REC_CLAIMANT_DETAILS.LOSS_RESERVE;
                O_ALLOC_EXPENSE_RESERVE     := REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_RESERVE;
                O_UNALLOC_EXPENSE_RESERVE   := REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_RESERVE;
                O_CHECK_NBR                 := REC_CLAIMANT_DETAILS.CHECK_NBR;
                O_CLAIM_DRAFT_TYPE          := REC_CLAIMANT_DETAILS.CLAIM_DRAFT_TYPE;
                O_PAID_AMT                  := REC_CLAIMANT_DETAILS.DRAFT_PAID_AMT;


            END IF;

            BREASSIGNVARIABLES := 0;

            --CHECK HERE IS CLAIM, CLAIMANT, CLAIMANT_COVERAGE, CLAIMANT_TRANS, TRANS_TYPE IS SAME
            --BUT TREATY IS DIFFERENT. THIS MEANS WE ARE CURRENTLY BROWSING THE SECOND RECORD WITH DUPLICATE VALUES.
            --WE NEED TO SUPRESS THEM.
            IF O_CLAIM = REC_CLAIMANT_DETAILS.CLAIM_KEY AND
                O_CLAIMANT = REC_CLAIMANT_DETAILS.CLAIMANT_KEY AND
                O_CLAIMANT_COVERAGE = REC_CLAIMANT_DETAILS.CLAIMANT_COVERAGE AND
                O_CLAIMANT_TRANS  = REC_CLAIMANT_DETAILS.CLAIMANT_TRANS AND
                O_TRANS_TYPE = REC_CLAIMANT_DETAILS.TRANS_TYPE THEN

                IF O_TREATY_CONTRACT <> REC_CLAIMANT_DETAILS.TREATY_CONTRACT_NBR THEN


                    --DBMS_OUTPUT.PUT_LINE ( ' OLD_TREATY_CONTRACT '||O_TREATY_CONTRACT ||' NEW_TREATY_CONTRACT '||V_TREATY_CONTRACT);
                    --DBMS_OUTPUT.PUT_LINE('   TRIGGERING AMOUNT ADJUSTMENT LOGIC');

                    IF O_LOSS_PAID              = REC_CLAIMANT_DETAILS.LOSS_PAID THEN REC_CLAIMANT_DETAILS.LOSS_PAID := 0; END IF;
                    IF O_ALLOC_EXPENSE_PAID     = REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_PAID THEN REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_PAID := 0; END IF;
                    IF O_UNALLOC_EXPENSE_PAID   = REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_PAID THEN REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_PAID := 0; END IF;
                    IF O_LOSS_RESERVE           = REC_CLAIMANT_DETAILS.LOSS_RESERVE THEN REC_CLAIMANT_DETAILS.LOSS_RESERVE := 0; END IF;
                    IF O_ALLOC_EXPENSE_RESERVE  = REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_RESERVE THEN REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_RESERVE := 0; END IF;
                    IF O_UNALLOC_EXPENSE_RESERVE = REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_RESERVE THEN REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_RESERVE := 0; END IF;
                    IF O_CHECK_NBR              = REC_CLAIMANT_DETAILS.CHECK_NBR THEN REC_CLAIMANT_DETAILS.CHECK_NBR := NULL; END IF;
                    IF O_CLAIM_DRAFT_TYPE       = REC_CLAIMANT_DETAILS.CLAIM_DRAFT_TYPE THEN REC_CLAIMANT_DETAILS.CLAIM_DRAFT_TYPE := NULL; END IF;
                    IF O_PAID_AMT               = REC_CLAIMANT_DETAILS.DRAFT_PAID_AMT THEN REC_CLAIMANT_DETAILS.DRAFT_PAID_AMT := 0; END IF;

                END IF;
            END IF;
      END IF;       
      
            INSERT INTO CCST_DW_CLAIMANT_DETAIL (
                CLAIM_KEY,
                CLAIMANT_KEY,
                DEPT_NBR,
                DEPT_DESC,
                BUSINESS_LINE_NAME,
                MAJOR_LINE_NAME,
                LINE_NBR,
                COVERAGE_LINE_DESC,
                A_S_LINE_NBR,
                A_S_LINE_DESC,
                CAUSE_OF_LOSS,
                CAUSE_GROUP,
                EXPENSE_CODE,
                TREATY_CONTRACT_NBR,
                TRANS_DATE,
                TRANS_TYPE,
                LOSS_PAID,
                UNALLOC_EXPENSE_PAID,
                ALLOC_EXPENSE_PAID,
                LOSS_RESERVE,
                UNALLOC_EXPENSE_RESERVE,
                ALLOC_EXPENSE_RESERVE,
                CEDED_LOSS_PAID,
                CEDED_EXPENSE_PAID,
                CEDED_LOSS_RESERVE,
                CEDED_EXPENSE_RESERVE,
                CHECK_NBR,
                OPERATOR_ID,
                CLAIM_DRAFT_TYPE,
                DRAFT_PAID_AMT,
                CEDED_ULAE_PAID,
                CEDED_ULAE_RESERVE,
                CLAIMANT_COVERAGE,
                CLAIMANT_TRANS,
                STAFF_ADJUSTER,
                ADJUSTER_SUPERVISOR,
                HOME_OFFICE_SUPERVISOR,
                INDEPENDENT_ADJUSTER,
                STAFF_ADJUSTER_BRANCH,
                STAFF_ADJUSTER_BRANCH_NAME,
                PUBLICID,
                CREATE_ID,
                FIRST_MODIFIED,
                AUDIT_ID,
                LAST_MODIFIED
            ) VALUES (
                REC_CLAIMANT_DETAILS.CLAIM_KEY,
                REC_CLAIMANT_DETAILS.CLAIMANT_KEY,
                REC_CLAIMANT_DETAILS.DEPT_NBR,
                REC_CLAIMANT_DETAILS.DEPT_DESC,
                REC_CLAIMANT_DETAILS.BUSINESS_LINE_NAME,
                REC_CLAIMANT_DETAILS.MAJOR_LINE_NAME, -- MAJOR_LINE_NAME                          
                REC_CLAIMANT_DETAILS.COVERAGE_LINE_NBR, -- LINE_NBR                                  
                REC_CLAIMANT_DETAILS.COVERAGE_LINE_DESC,  -- COVERAGE_LINE_DESC                      
                REC_CLAIMANT_DETAILS.A_S_LINE_NBR, -- A_S_LINE_NBR                               
                REC_CLAIMANT_DETAILS.A_S_LINE_DESC, -- A_S_LINE_DESC  
                REC_CLAIMANT_DETAILS.CAUSE_OF_LOSS,
                REC_CLAIMANT_DETAILS.CAUSE_GROUP,
                REC_CLAIMANT_DETAILS.EXPENSE_CODE,  -- EXPENSE_CODE
                REC_CLAIMANT_DETAILS.TREATY_CONTRACT_NBR,
                REC_CLAIMANT_DETAILS.TRANS_DATE,
                REC_CLAIMANT_DETAILS.TRANS_TYPE,
                REC_CLAIMANT_DETAILS.LOSS_PAID, -- LOSS_PAID
                REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_PAID,           -- UNALLOC_EXPENSE_PAID
                REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_PAID,           -- ALLOC_EXPENSE_PAID
                REC_CLAIMANT_DETAILS.LOSS_RESERVE,   -- LOSS_RESERVE
                REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_RESERVE,           -- UNALLOC_EXPENSE_RESERVE
                REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_RESERVE,           -- ALLOC_EXPENSE_RESERVE
                REC_CLAIMANT_DETAILS.CEDED_LOSS_PAID,           -- CEDED_LOSS_PAID                         
                REC_CLAIMANT_DETAILS.CEDED_EXPENSE_PAID,           -- CEDED_EXPENSE_PAID                         
                REC_CLAIMANT_DETAILS.CEDED_LOSS_RESERVE,           -- CEDED_LOSS_RESERVE                         
                REC_CLAIMANT_DETAILS.CEDED_EXPENSE_RESERVE,           -- CEDED_EXPENSE_RESERVE  
                REC_CLAIMANT_DETAILS.CHECK_NBR,
                REC_CLAIMANT_DETAILS.OPERATOR_ID,
                REC_CLAIMANT_DETAILS.CLAIM_DRAFT_TYPE,
                REC_CLAIMANT_DETAILS.DRAFT_PAID_AMT,
                REC_CLAIMANT_DETAILS.CEDED_ULAE_PAID,   -- CEDED_ULAE_PAID                            
                REC_CLAIMANT_DETAILS.CEDED_ULAE_RESERVE,   -- CEDED_ULAE_RESERVE  
                REC_CLAIMANT_DETAILS.CLAIMANT_COVERAGE,
                REC_CLAIMANT_DETAILS.CLAIMANT_TRANS,
                REC_CLAIMANT_DETAILS.STAFF_ADJUSTER,
                REC_CLAIMANT_DETAILS.ADJUSTER_SUPERVISOR,
                '', -- HOME_OFFICE_SUPERVISOR I.E, WILL BE EMPTY CC CLAIMS
                REC_CLAIMANT_DETAILS.INDEPENDENT_ADJUSTER, -- INDEPENDENT_ADJUSTER
                REC_CLAIMANT_DETAILS.STAFF_ADJ_BRANCH_NUMBER,  -- STAFF_ADJUSTER_BRANCH                       
                REC_CLAIMANT_DETAILS.STAFF_ADJ_BRANCH_NAME, -- STAFF_ADJUSTER_BRANCH_NAME 
                REC_CLAIMANT_DETAILS.PUBLICID,
                REC_CLAIMANT_DETAILS.CREATEUSERID,
                REC_CLAIMANT_DETAILS.CREATETIME,
                REC_CLAIMANT_DETAILS.AUDITID,
                REC_CLAIMANT_DETAILS.CL_UPDATETIME
            );

      V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
      IF V_COMMIT_COUNT > 999 THEN
         COMMIT;
         V_COMMIT_COUNT := 0;
      END IF;
    END LOOP;

        CLOSE CUR_CC_DW_CLAIMANT_DETAILS;
        COMMIT;

        -- BULK INSERET INTO CC ARCHIVE TABLE
        SP_CCSTA_DW_CLMT_DT_BINSERT(START_DATE, END_DATE);
        COMMIT;
        
        IF SYSDATE = LAST_DAY(SYSDATE) THEN
            DELETE FROM CCST_DW_CLAIMANT_DETAIL
            WHERE TRUNC(LAST_MODIFIED) >= TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), - 2) + 1) 
            AND  TRUNC(LAST_MODIFIED) < ADD_MONTHS((LAST_DAY(SYSDATE)+1),-1);
            COMMIT;
        END IF;

       --INSERET DATA INTO DW_CLAIMANT_DETAIL
       SP_UPDATE_CCST_TO_DW_CLMT_DT(V_SDATE,V_EDATE);
       COMMIT;
       
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'NO DATA FOUND. ' || SQLERRM);
            END;
            COMMIT;
        
        EXCEPTION
             WHEN STANDARD.NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR (-20201, 'DATA SELECTION NOT SUCCESSFUL IN SP_CCST_DW_CLAIMANT_DETAIL..'||SQLERRM);
END SP_CCST_DW_CLAIMANT_DETAIL;

PROCEDURE SP_CCST_DW_CLAIMANT_ADJUSTER (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) IS

    V_RUN_DATE NUMBER;
    V_COMMIT_COUNT  NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    V_IA_STATUS               VARCHAR2 (10);
    V_TEMP_IA_STATUS               VARCHAR2 (10) := 'ZZ';
    V_REC_COUNT               NUMBER;
    V_TRANS_DATE              DATE;

     
      CURSOR CUR_CCST_DW_CLAIMANT_ADJUSTER IS
      SELECT *
      FROM CCST_DW_CLAIMANT_ADJUSTER
      WHERE TRANS_DATE >= V_SDATE AND TRANS_DATE <= V_EDATE;
     
        CURSOR CUR_CC_CLAIMANT_ADJUSTER IS
         WITH CLAIM_DATA AS (
            SELECT 
                      C.ID                       AS CLAIM_KEY
                    , C.CLAIMNUMBER         
                    , TLCS.NAME                  AS CLAIM_STATUS
                  --  , TLLC.NAME                  AS CAUSE_OF_LOSS 
                    , TLLOBC.NAME AS CLM_BUSINESS_LINE
                    , 'POLICY DETAILS -->'
                    , TLPTY.NAME                 AS  BL_NAME
                    , P.ID                       AS POLICY_KEY
                    , C.CREATETIME
                    , C.UPDATETIME               AS CL_UPDATETIME
                    , P.POLICYNUMBER             AS POLICY_NUMBER
                    --, PD.ID                      as POL_DEPT
                    , VWDN.DEPT_NBR AS DEPT_NBR
                    , VWDN.DEPT_DESC AS DEPT_DESC
                   -- , PD.DEPTNUMBER              as DEPT_NBR
                   -- , PD.DEPTNAME                as DEPT_DESC
                    , TLLOBC.NAME  AS CLM_BUSINESS_LINE_NAME
                    , CASE
                            WHEN (TLPTY.NAME = 'Businessowners')
                                THEN
                                 'Business Owner'
                            WHEN (TLPTY.NAME = 'Comm/Farm Auto')
                                THEN 
                                    CASE WHEN (P.POLICYNUMBER LIKE '%FAA%' OR P.POLICYNUMBER LIKE '%SAA%'  OR P.POLICYNUMBER LIKE '%GAA%')
                                        THEN 'Farm Auto'
                                        ELSE 'Commercial Auto'
                                    END
                            WHEN (TLPTY.NAME = 'Farmowners')
                                THEN 'Farm'
                             WHEN (TLPTY.NAME = 'Commercial Manual')
                                THEN 'Manual'      
                              WHEN (TLPTY.NAME = 'Homeowners')
                                THEN 'Homeowner' 
                            WHEN (TLPTY.name = 'Personal Auto')
                                  THEN 'Personal Automobile' 
                           WHEN (TLPTY.name = 'Personal Excess')
                              THEN 'Personal Umbrella' 
                            ELSE TLPTY.NAME
                      END                        AS BUSINESS_LINE_NAME
                      , CASE
                            WHEN TLPTY.NAME IN ('Businessowners', 'Commercial Umbrella', 'Commercial Manual')
                                THEN 'Commercial'
                            WHEN TLPTY.NAME IN ('Homeowners', 'Personal Excess', 'Dwelling Fire')
                                THEN 'Personal'
							WHEN TLPTY.NAME IN ('Personal Auto')
                               THEN 'Auto'
                            WHEN TLPTY.NAME IN ('Farm Umbrella', 'Farmowners')
                                THEN 'Farm'                    
                            WHEN (TLPTY.NAME = 'Comm/Farm Auto')
                                THEN 
                                    CASE WHEN (P.POLICYNUMBER LIKE '%FAA%' OR P.POLICYNUMBER LIKE '%SAA%'  OR P.POLICYNUMBER LIKE '%GAA%')
                                        THEN 'Farm'
                                        ELSE 'Commercial'
                                    END
                        END AS MAJOR_LINE_NAME
                        FROM CCADMIN.CC_CLAIM@ECIG_TO_GWCC_QA_LINK C
                        LEFT OUTER JOIN CCADMIN.CCTL_LOBCODE@ECIG_TO_GWCC_QA_LINK TLLOBC ON TLLOBC.ID = C.LOBCODE AND TLLOBC.RETIRED = 0
                        LEFT OUTER JOIN CCADMIN.CCTL_CLAIMSTATE@ECIG_TO_GWCC_QA_LINK              TLCS ON TLCS.ID = C.STATE AND TLCS.RETIRED = 0
                        LEFT OUTER JOIN CCADMIN.CCTL_LOSSCAUSE@ECIG_TO_GWCC_QA_LINK              TLLC ON TLLC.ID = C.LOSSCAUSE AND TLLC.RETIRED = 0
                        LEFT OUTER JOIN CCADMIN.CCTL_LOSSTYPE@ECIG_TO_GWCC_QA_LINK              TLLT ON TLLT.ID = C.LOSSTYPE AND TLLT.RETIRED = 0
                        INNER JOIN CCADMIN.CC_POLICY@ECIG_TO_GWCC_QA_LINK P ON P.ID=C.POLICYID AND P.RETIRED=0
                        LEFT OUTER JOIN CCADMIN.CCTL_POLICYTYPE@ECIG_TO_GWCC_QA_LINK TLPTY ON TLPTY.ID=P.POLICYTYPE AND TLPTY.RETIRED=0
                        LEFT JOIN WHOUSE.VW_DEPTNUMBER VWDN ON VWDN.POLICYID = P.ID
                       -- LEFT OUTER JOIN CCADMIN.CCX_POLICYDEPARTMENT_EXT@ECIG_TO_GWCC_QA_LINK PD ON P.POLICYDEPARTMENT_EXTID = PD.ID AND PD.RETIRED = 0
                        LEFT OUTER JOIN DEC_POLICY DP ON DP.DEC_POLICY = P.DECPOLICY_EXT
                        LEFT OUTER JOIN PC_POLICYPERIOD@ECIG_TO_PC_LINK PP ON PP.ID=P.PolicySystemPeriodID -- CONNECTING TO PC's POLICYPERIOD TABLE
                        LEFT OUTER JOIN PC_ProducerCode@ECIG_TO_PC_LINK PRC ON PRC.ID=PP.ProducerCodeOfRecordID -- CONNECTING TO PC's PRODUCERCODE TABLE
                        LEFT OUTER JOIN pc_group@ECIG_TO_PC_LINK GR ON GR.ID=PRC.BRANCHID -- CONNECTING TO PC's GROUP TABLE
                        WHERE TLCS.NAME NOT IN ('Draft')
                  
            ),
            CLAIMANT_EXPOSURES AS(
            SELECT * FROM (
            SELECT DISTINCT
                         CD.CLAIM_KEY
                        , CD.CLAIMNUMBER
                        , CD.CREATETIME
                        , CD.CL_UPDATETIME
                        , CD.CLAIM_STATUS
                        , CD.BUSINESS_LINE_NAME
                        , CD.MAJOR_LINE_NAME
                        , CD.DEPT_NBR
                        , CD.DEPT_DESC
                        , WHOUSE.GET_CAUSE_OF_LOSS(EX.ID) AS CAUSE_OF_LOSS
                     , CCTE.CONTACTID AS CLAIMANT_KEY
                     , EX.ID AS CLAIMANT_COVERAGE
                     , TLES.NAME AS CAUSE_STATUS
                     , EX.ID AS EXPOSUREID
                     , EX.PUBLICID
                     , EX.UPDATETIME AS EX_UPDATETIME
                     -- EXPOSURE DETAILS
                     , TLAGRPTY.NAME AS ASSIGNED_GROUP_TYPE
                    -- , AGRP.NAME AS CAUSE_GROUP -- ASSIGNED GROUP
                     , CASE 
                        WHEN TLLPTY.TYPECODE = 'insured'
                          THEN '1st Party Property' 
                        ELSE '3rd Party Casualty'
                      END AS CAUSE_GROUP
                     , TLVL.NAME AS VALIDATION_LEVEL
                     --COVERAGE DETAILS
                     , TLCOVSTY.NAME AS EXPOSURE_COV_SUBTYPE
                     , TLCOV.NAME AS COVERAGE_SUBTYPE
                     , TLCOVTY.NAME AS COVERAGE_TYPE
                     
                     --A_S_LINE AND A_S_LINE_COVERAGE DETAILS BELOW
                     , ASL.A_S_LINE_DESC 
                     , ASL.A_S_LINE_NBR 
                     , ASCL.COVERAGE_LINE_DESC 
                     , ASCL.LINE_NBR AS COVERAGE_LINE_NBR 
                     --INCIDENT DETAILS 
                     , TLINC.NAME AS INCIDENT_SUBTYPE
                     , TLLPTY.NAME AS LOSS_PARTY
                     , INC.ID AS INCIDENTID
                     -- INCIDENT DETAILS
                     , EX.ClaimantDenormID 
                     , CTE.ID AS CONTACTID 
                     , CASE WHEN STFADJCT.NAME IS NOT NULL
                        THEN STFADJCT.NAME 
                        WHEN STFADJCT.FIRSTNAME IS NOT NULL AND STFADJCT.LASTNAME IS NOT NULL
                        THEN STFADJCT.LASTNAME || ' ' || STFADJCT.FIRSTNAME
                        END STAFF_ADJUSTER
                    , STADJU.ID AS STAFF_ADJUSTER_ID
                    , AGRP.ID AS GROUP_ID
                    , CTE.AGENCYDOMICILESTATE_EXT 
					, BRN.BRANCH_NBR AS STAFF_ADJ_BRANCH_NUMBER
                    , BRN.BRANCH_NAME AS STAFF_ADJ_BRANCH_NAME   
            
            FROM 
            CLAIM_DATA CD 
            INNER JOIN CCADMIN.CC_EXPOSURE@ECIG_TO_GWCC_QA_LINK EX ON EX.CLAIMID=CD.CLAIM_KEY AND EX.RETIRED=0
            INNER JOIN CCADMIN.CCTL_EXPOSURESTATE@ECIG_TO_GWCC_QA_LINK TLES ON TLES.ID = EX.STATE AND TLES.RETIRED = 0
            INNER JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTE ON  CCTE.CLAIMID=CD.CLAIM_KEY AND CCTE.RETIRED=0 -- FOR AGENT
            INNER JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRE ON CCTRE.ClaimContactID=CCTE.ID AND CCTRE.EXPOSUREID=EX.ID AND CCTRE.RETIRED=0 -- FOR AGENT
            INNER JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID=CCTRE.ROLE AND TLCCTR.TYPECODE IN ('claimant') AND TLCCTR.RETIRED=0 -- FOR AGENT
            INNER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTE ON CTE.ID=CCTE.CONTACTID AND CTE.RETIRED=0 AND EX.ClaimantDenormID=CTE.ID
            -- COVERAGE DETAILS
            
            LEFT OUTER JOIN CCADMIN.CCTL_COVERAGESUBTYPE@ECIG_TO_GWCC_QA_LINK TLCOVSTY ON TLCOVSTY.ID=EX.COVERAGESUBTYPE
            LEFT OUTER JOIN CCADMIN.CC_COVERAGE@ECIG_TO_GWCC_QA_LINK COV ON COV.ID=EX.COVERAGEID AND COV.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CCTL_COVERAGE@ECIG_TO_GWCC_QA_LINK TLCOV ON TLCOV.ID=COV.SUBTYPE AND TLCOV.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CCTL_COVERAGETYPE@ECIG_TO_GWCC_QA_LINK TLCOVTY ON TLCOVTY.ID=COV.TYPE AND TLCOVTY.RETIRED=0
            
            LEFT OUTER JOIN A_S_COVERAGE_LINE ASCL ON ASCL.A_S_COVERAGE_LINE=COV.ASCOVERAGELINE_EXT-- AND COV.RETIRED=0 -- FOUND FEW DUPLICATES WITH THE FOLLOWING LINE_NBR 5007,8510,8690, RANK IT BY FIRST_MODIFIED DESC or LAST_MODIFIED DESC
            LEFT OUTER JOIN A_S_LINE ASL ON ASL.A_S_LINE=ASCL.A_S_LINE
            -- INCIDENT DETAILS
            
            LEFT OUTER JOIN CCADMIN.CC_INCIDENT@ECIG_TO_GWCC_QA_LINK INC ON INC.ID=EX.INCIDENTID AND INC.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CCTL_INCIDENT@ECIG_TO_GWCC_QA_LINK TLINC ON TLINC.ID=INC.SUBTYPE AND TLINC.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CCTL_LOSSPARTYTYPE@ECIG_TO_GWCC_QA_LINK TLLPTY ON TLLPTY.ID=INC.LOSSPARTY AND TLLPTY.RETIRED=0
            
            -- ASSIGNED GROUP DETAILS
            LEFT OUTER JOIN CCADMIN.CC_GROUP@ECIG_TO_GWCC_QA_LINK AGRP ON AGRP.ID = EX.ASSIGNEDGROUPID AND AGRP.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CCTL_GROUPTYPE@ECIG_TO_GWCC_QA_LINK TLAGRPTY ON TLAGRPTY.ID = AGRP.GROUPTYPE AND TLAGRPTY.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CCTL_VALIDATIONLEVEL@ECIG_TO_GWCC_QA_LINK TLVL ON TLVL.ID = AGRP.VALIDATIONLEVEL AND TLVL.RETIRED=0
            
            LEFT OUTER JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK STADJU ON  STADJU.ID = EX.ASSIGNEDUSERID AND STADJU.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK STADJCR ON  STADJCR.ID = STADJU.CREDENTIALID AND STADJCR.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK  STFADJCT ON STFADJCT.ID = STADJU.CONTACTID AND STFADJCT.RETIRED=0
			LEFT OUTER JOIN LOGIN_PROFILE  LP ON LOWER(LP.LOGIN_ID) = LOWER(STADJCR.USERNAME)-- AND STFADJCT.RETIRED=0
			LEFT OUTER JOIN STAFF  STF ON STF.LOGIN_PROFILE = LP.LOGIN_PROFILE --AND STFADJCT.RETIRED=0
			LEFT OUTER JOIN BRANCH  BRN ON STF.BRANCH = BRN.BRANCH -- NEED TO VERIFY THE ASSIGNEMENT QUEUE LOGIC IF EXISTS FOR CC
            
            )
            )
            , INDEPENDENT_ADJUSTERS AS(
                    SELECT * FROM (
                    SELECT
                            CD.CLAIM_KEY 
                            , CD.CLAIMNUMBER
                            , SRIA.ASSIGNMENTDATE AS IA_OPEN_DATE
                            -- , SRIA.CLOSEDATE  AS IA_CLOSE_DATE
                            -- , SRC.UPDATETIME AS CANCELLED_DATE
                            , CASE WHEN SRIA.CLOSEDATE IS NOT NULL
                                THEN SRIA.CLOSEDATE
                                ELSE  SRC.UPDATETIME 
                              END AS IA_CLOSE_DATE 
                            , TLSRP.TYPECODE AS IND_ADJUSTER_STATUS
                            , CASE WHEN CTIA.NAME IS NOT NULL
                                THEN CTIA.NAME 
                                WHEN CTIA.FIRSTNAME IS NOT NULL AND CTIA.LASTNAME IS NOT NULL
                                THEN CTIA.LASTNAME || ' ' || CTIA.FIRSTNAME
                                END INDEPENDENT_ADJUSTER
                            , ROW_NUMBER() over (partition by  CD.CLAIMNUMBER order by SRIA.ID DESC, SRIA.UPDATETIME DESC) as SR_ROW_RANK
                    FROM
                    CLAIM_DATA CD 
                    INNER JOIN CCADMIN.CC_SERVICEREQUEST@ECIG_TO_GWCC_QA_LINK SRIA ON SRIA.CLAIMID=CD.CLAIM_KEY --AND SRIA.RETIRED=0
                    INNER JOIN CCADMIN.CCTL_SERVICEREQUESTPROGRESS@ECIG_TO_GWCC_QA_LINK TLSRP on TLSRP.ID = SRIA.PROGRESS AND TLSRP.RETIRED=0
                    LEFT OUTER JOIN CCADMIN.CC_SERVICEREQUESTCHANGE@ECIG_TO_GWCC_QA_LINK SRC ON SRC.SERVICEREQUESTID =  SRIA.ID
                    LEFT OUTER JOIN CCADMIN.CCTL_SERVICEREQUESTOPERATION@ECIG_TO_GWCC_QA_LINK TLSRO ON TLSRO.ID = SRC.OPERATION AND TLSRO.TYPECODE IN ('cancelservicerequest') AND TLSRO.RETIRED=0
                    INNER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK CTIA ON CTIA.ID=SRIA.SPECIALISTID AND CTIA.RETIRED=0
                    INNER JOIN CCADMIN.CC_CLAIMCONTACT@ECIG_TO_GWCC_QA_LINK CCTIA ON  CCTIA.ContactID=CTIA.ID AND CTIA.RETIRED=0 -- FOR AGENT
                    INNER JOIN CCADMIN.CC_CLAIMCONTACTROLE@ECIG_TO_GWCC_QA_LINK CCTRIA ON CCTRIA.CLAIMCONTACTID=CCTIA.ID  AND CCTRIA.RETIRED=0 -- FOR AGENT
                    INNER JOIN CCADMIN.CCTL_CONTACTROLE@ECIG_TO_GWCC_QA_LINK TLCCTR ON TLCCTR.ID=CCTRIA.ROLE AND TLCCTR.TYPECODE IN ('servicerequestspecialist') AND TLCCTR.RETIRED=0 --AND TLCCTR.TYPECODE IN ('agent', 'insured') AND TLCCTR.RETIRED=0
                    ) WHERE SR_ROW_RANK < 2
                    )
            ,
            CLAIMANT_EXP_SUPERVISOR AS(
            SELECT * FROM (
            SELECT 
                       EX.CLAIM_KEY
                     , EX.CLAIMNUMBER
                     , EX.CLAIMANT_KEY
                     , EX.CLAIM_STATUS
                     , EX.CLAIMANT_COVERAGE
                     , EX.CAUSE_STATUS
                     -- EXPOSURE DETAILS
                     , EX.ASSIGNED_GROUP_TYPE
                     , EX.CAUSE_GROUP -- ASSIGNED GROUP
                     , EX.VALIDATION_LEVEL
                     --COVERAGE DETAILS
                     , EX.EXPOSURE_COV_SUBTYPE
                     , EX.COVERAGE_SUBTYPE
                     , EX.COVERAGE_TYPE
                     , EX.PUBLICID
                     --A_S_LINE AND A_S_LINE_COVERAGE DETAILS BELOW
                     , EX.A_S_LINE_DESC 
                     , EX.A_S_LINE_NBR 
                     , EX.COVERAGE_LINE_DESC 
                     , EX.COVERAGE_LINE_NBR 
                     --A_S_LINE AND A_S_LINE_COVERAGE DETAILS ABOVE
                     --INCIDENT DETAILS 
                     , EX.INCIDENT_SUBTYPE
                     , EX.LOSS_PARTY
                     , EX.INCIDENTID
                     -- INCIDENT DETAILS
                     , EX.ClaimantDenormID 
                     , EX.EXPOSUREID
                     , EX.CONTACTID
                   -- , CCTRP.ID AS CLAIMCONTACTROLEID_CLAIMANT
                     , CASE WHEN SPRVGU.MANAGER=1
                        THEN 'Y'
                            ELSE 'N'
                        END MANAGER
                     , CASE WHEN SPRVGU.MEMBER=1
                        THEN 'Y'
                            ELSE 'N'
                        END MEMBER
                    , SPRVGU.PRIMARYGROUP_EXT
                    , CASE WHEN SPRVGU.PRIMARYGROUP_EXT=1
                            THEN 'Y'
                        WHEN SPRVGU.PRIMARYGROUP_EXT=1
                            THEN 'N'
                        ELSE 'NOT SET'
                        END PRIMARYGROUP  
                       , EX.STAFF_ADJUSTER
                       , EX.AGENCYDOMICILESTATE_EXT 
                       , EX.STAFF_ADJUSTER_ID
                       , EX.GROUP_ID
                       , EX.STAFF_ADJ_BRANCH_NUMBER
                       , EX.STAFF_ADJ_BRANCH_NAME
                       , CBM.GROUP_NAME AS CLAIM_BRANCH_NAME
                       , CBM.ST_CA  
                       , CBM.ST_NV 
                       , CBM.ST_OR   
                       , CBM.ST_AZ  
                       , CBM.ST_WA  
                       , CBM.ST_NM
                       , CBM.CLAIM_BRANCH_NBR 
                    , CASE WHEN SPRVUCT.NAME IS NOT NULL
                        THEN SPRVUCT.NAME 
                        WHEN SPRVUCT.FIRSTNAME IS NOT NULL AND SPRVUCT.LASTNAME IS NOT NULL
                        THEN SPRVUCT.LASTNAME || ' ' || SPRVUCT.FIRSTNAME
                        END STAFF_ADJUSTER_SUPERVISOR   
                        , SPRVG.NAME AS GROUP_NAME
                         , ROW_NUMBER() OVER(
                                  PARTITION BY EX.CLAIM_KEY, EX.EXPOSUREID, EX.ClaimantDenormID--, SPRVG.ID
                                ORDER BY EX.EXPOSUREID, EX.ClaimantDenormID, SPRVU.ID, SPRVG.ID ) AS SRVR_ROW_RANK
            
                        , RANK() OVER(
                                PARTITION BY EX.CLAIM_KEY
                                ORDER BY EX.EXPOSUREID, EX.ClaimantDenormID, SPRVU.ID, SPRVG.ID ) AS SUPERVISOR_RANK
                        , DENSE_RANK() OVER(
                                  PARTITION BY EX.CLAIM_KEY
                                ORDER BY EX.EXPOSUREID,EX.ClaimantDenormID, SPRVU.ID, SPRVG.ID ) AS SUPERVISOR_DENSE_RANK
            --            , RANK() OVER(
            --                    PARTITION BY CD.CLAIM_KEY
            --                    ORDER BY SPRVUCT.ID DESC) AS SUPERVISOR_RANK      
            FROM 
             CLAIMANT_EXPOSURES EX
            -- SUPERVISIOR
            LEFT OUTER JOIN CCADMIN.CC_GROUPUSER@ECIG_TO_GWCC_QA_LINK SPRVGU ON SPRVGU.USERID=EX.STAFF_ADJUSTER_ID --AND SPRVGU.RETIRED=0 -- AND SPRVG.PrimaryGroup_Ext =1
            LEFT OUTER JOIN CCADMIN.CC_GROUP@ECIG_TO_GWCC_QA_LINK SPRVG ON SPRVG.ID=SPRVGU.GROUPID AND SPRVG.RETIRED=0 
            LEFT OUTER JOIN CCST_CLAIM_BRANCH_MAPPING CBM ON CBM.GROUP_ID = SPRVG.ID
            --LEFT OUTER JOIN cc_group@ECIG_TO_GWCC_QA_LINK grp on grp.id = ce.AssignedGroupID and grp.retired=0
            LEFT OUTER JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK SPRVU ON  SPRVU.ID = SPRVG.SUPERVISORID  AND SPRVU.RETIRED=0
            LEFT OUTER JOIN CCADMIN.CC_CONTACT@ECIG_TO_GWCC_QA_LINK  SPRVUCT ON SPRVUCT.ID = SPRVU.CONTACTID AND SPRVUCT.RETIRED=0
            ) WHERE PRIMARYGROUP_EXT=1 AND SRVR_ROW_RANK < 2 
            ),
            CLAIMANT_TRANS AS(
            SELECT * FROM (
            SELECT 
                    CD.CLAIM_KEY 
                    , CD.CLAIMNUMBER
                    , CD.CLAIM_STATUS
                    , CD.BUSINESS_LINE_NAME
                    , CD.MAJOR_LINE_NAME
                    , CD.DEPT_NBR
                    , CD.DEPT_DESC
                    , CD.CAUSE_OF_LOSS
                    , CD.CLAIMANT_KEY
                    , CD.CLAIMANT_COVERAGE
                    , CD.CAUSE_STATUS
                    , CD.A_S_LINE_DESC
                    , CD.A_S_LINE_NBR
                    , CD.COVERAGE_LINE_DESC
                    , CD.COVERAGE_LINE_NBR
                    , CD.CAUSE_GROUP
                    , CD.AGENCYDOMICILESTATE_EXT
                    , CD.STAFF_ADJUSTER
                    , CD.STAFF_ADJUSTER_ID
                    , CD.GROUP_ID
                    , CD.STAFF_ADJ_BRANCH_NUMBER
                    , CD.STAFF_ADJ_BRANCH_NAME
                    , TR.ID                     AS CLAIMANT_TRANS
                    , CD.EXPOSUREID             AS EX_EXPOSUREID
                    , TR.EXPOSUREID             AS TR_EXPOSUREID
                    , CAST(TR.UPDATETIME AS DATE)            AS TRANS_DATE
                  --  , TR.CREATEUSERID           AS OPERATOR_USER_ID
                    , TRUCR.USERNAME            AS OPERATOR_ID
                    , TLTRS.NAME                AS TRANS_TYPE  
                    , CD.PUBLICID
                    , CD.CREATETIME
                    , CD.CL_UPDATETIME
                    , CD.EX_UPDATETIME
                    , TRUCR.USERNAME            AS CREATEUSERID
                    , UUCR.USERNAME                AS AUDITID
            FROM 
                    CLAIMANT_EXPOSURES CD 
                    INNER JOIN CCADMIN.CC_TRANSACTION@ECIG_TO_GWCC_QA_LINK                TR ON TR.CLAIMID = CD.CLAIM_KEY AND CD.EXPOSUREID=TR.EXPOSUREID AND TR.RETIRED = 0
                    INNER JOIN CCADMIN.CCTL_TRANSACTION@ECIG_TO_GWCC_QA_LINK              TLTR ON TLTR.ID = TR.SUBTYPE AND TLTR.RETIRED = 0
                    INNER JOIN CCADMIN.CC_TRANSACTIONLINEITEM@ECIG_TO_GWCC_QA_LINK        TRLI ON TRLI.TRANSACTIONID = TR.ID AND TRLI.RETIRED = 0
                    LEFT OUTER JOIN CCADMIN.CCTL_TRANSACTIONSTATUS@ECIG_TO_GWCC_QA_LINK   TLTRS ON TLTRS.ID = TR.STATUS AND TLTRS.RETIRED = 0
                    LEFT OUTER JOIN CCADMIN.CCTL_COSTTYPE@ECIG_TO_GWCC_QA_LINK            TLCSTTY ON TLCSTTY.ID = TR.COSTTYPE AND TLCSTTY.RETIRED = 0
                    LEFT OUTER JOIN CCADMIN.CCTL_COSTCATEGORY@ECIG_TO_GWCC_QA_LINK        TLCG ON TLCG.ID = TR.COSTCATEGORY AND TLCG.RETIRED = 0
                    LEFT OUTER JOIN CCADMIN.CC_CHECK@ECIG_TO_GWCC_QA_LINK                 CH ON CH.ID = TR.CHECKID AND CH.RETIRED = 0 --AND TR.SUBTYPE=
                    LEFT OUTER JOIN CCADMIN.CCTL_TRANSACTIONSTATUS@ECIG_TO_GWCC_QA_LINK   TLCHS ON TLCHS.ID = CH.STATUS AND TLCHS.RETIRED = 0
                    LEFT OUTER  JOIN CCADMIN.CCTL_PAYMENTMETHOD@ECIG_TO_GWCC_QA_LINK      TLPM ON TLPM.ID = CH.PAYMENTMETHOD AND TLPM.RETIRED = 0
                    LEFT OUTER JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK                  TRU ON TR.CREATEUSERID = TRU.ID AND TRU.RETIRED = 0
                    LEFT OUTER JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK            TRUCR ON TRUCR.ID = TRU.CREDENTIALID AND TRUCR.RETIRED = 0
                    INNER JOIN CCADMIN.CC_USER@ECIG_TO_GWCC_QA_LINK                       UU ON TRU.UPDATEUSERID = UU.ID AND UU.RETIRED = 0
                    INNER JOIN CCADMIN.CC_CREDENTIAL@ECIG_TO_GWCC_QA_LINK                 UUCR  ON UUCR.ID = UU.CREDENTIALID AND UUCR.RETIRED = 0
                    ORDER BY TR.UPDATETIME
                )
            ),
            CLAIMANT_ADJUSTER AS (
                        SELECT 
                          CCT.CLAIM_KEY
                        , CCT.CLAIMNUMBER
                        , CCT.CLAIMANT_KEY
                        , CCT.CLAIM_STATUS 
                        , CCT.DEPT_NBR
                        , CCT.DEPT_DESC
                        , CCT.BUSINESS_LINE_NAME
                        , CCT.MAJOR_LINE_NAME
                        , CCT.COVERAGE_LINE_NBR
                        , CCT.COVERAGE_LINE_DESC
                        , CCT.A_S_LINE_NBR
                        , CCT.A_S_LINE_DESC
                        , CCT.CAUSE_OF_LOSS
                        , CCT.CAUSE_GROUP
                        , CCT.TRANS_DATE
                        , CCT.OPERATOR_ID
                        , CCT.CLAIMANT_COVERAGE
                        , CCT.CAUSE_STATUS
                        , CCT.AGENCYDOMICILESTATE_EXT AS AGENCYDOMICILESTATE
                        , CCT.STAFF_ADJUSTER_ID
                        , CCT.GROUP_ID
                        , CCT.STAFF_ADJUSTER
                        , CES.STAFF_ADJUSTER_SUPERVISOR AS ADJUSTER_SUPERVISOR
                        -- HOME_OFFICE_SUPERVISOR I.E, WILL BE EMPTY CC CLAIMS
                        , CASE 
                            WHEN CCT.CLAIM_STATUS NOT IN ('Draft') AND CCT.STAFF_ADJUSTER_ID IS NULL AND CCT.GROUP_ID IS NOT NULL THEN
                               CES.CLAIM_BRANCH_NAME
                               ELSE 
                               CCT.STAFF_ADJ_BRANCH_NAME
                           END STAFF_ADJ_BRANCH_NAME
                      , CASE
                          WHEN CCT.CLAIM_STATUS NOT IN ('Draft') AND CCT.STAFF_ADJUSTER_ID IS NULL AND CCT.GROUP_ID IS NOT NULL THEN
                           CASE   
                                WHEN CCT.AGENCYDOMICILESTATE_EXT IN('CA') THEN CES.ST_CA
                                WHEN CCT.AGENCYDOMICILESTATE_EXT IN('NV') THEN CES.ST_NV
                                WHEN CCT.AGENCYDOMICILESTATE_EXT IN('OR') THEN CES.ST_OR
                                WHEN CCT.AGENCYDOMICILESTATE_EXT IN('AZ') THEN CES.ST_AZ
                                WHEN CCT.AGENCYDOMICILESTATE_EXT IN('WA') THEN CES.ST_WA
                                WHEN CCT.AGENCYDOMICILESTATE_EXT IN('NM') THEN CES.ST_NM
                            END
                           ELSE
                            CCT.STAFF_ADJ_BRANCH_NUMBER
                        END STAFF_ADJ_BRANCH_NUMBER
                        , IA.INDEPENDENT_ADJUSTER
                        , IA.IND_ADJUSTER_STATUS
                        , IA.IA_OPEN_DATE
                        , IA.IA_CLOSE_DATE
                          --ASSITANT_ADJUSTER I.E, WILL BE EMPTY CC CLAIMS
                         --AA_ADJUSTER_STATUS I.E, WILL BE EMPTY CC CLAIMS
                         --AA_OPEN_DATE I.E, WILL BE EMPTY CC CLAIMS
                         --AA_CLOSE_DATE I.E, WILL BE EMPTY CC CLAIMS
                        , CCT.PUBLICID
                        , CCT.CREATEUSERID
                        , CCT.CREATETIME
                        , CCT.AUDITID
                        , CCT.CL_UPDATETIME
                        , CCT.EX_UPDATETIME
                         FROM 
                        CLAIMANT_TRANS CCT 
                        LEFT OUTER JOIN INDEPENDENT_ADJUSTERS IA ON IA.CLAIM_KEY=CCT.CLAIM_KEY
                        INNER JOIN CLAIMANT_EXP_SUPERVISOR CES ON CES.EXPOSUREID=CCT.TR_EXPOSUREID AND CES.CLAIM_KEY=CCT.CLAIM_KEY
            )
            SELECT  *
            FROM CLAIMANT_ADJUSTER
        WHERE
            (TRANS_DATE >= START_DATE OR EX_UPDATETIME >= START_DATE OR CL_UPDATETIME >= START_DATE)
        ORDER BY
            CL_UPDATETIME;
   
        REC_CLAIMANT_ADJUSTER CUR_CC_CLAIMANT_ADJUSTER%ROWTYPE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
        
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCST_DW_CLAIMANT_ADJUSTER',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

        COMMIT;
        
         -- DELETE THE RECORDS FROM CCST_DW_CLAIMANT_ADJUSTER WHICH HAVE THE TRANS_DATE BETWEEN THE START DATE AND END DATE.
        BEGIN
          -- DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - BEGIN');
            FOR V_CCST_DW_CLAIMANT_ADJUSTER IN CUR_CCST_DW_CLAIMANT_ADJUSTER LOOP
            --   DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT ADJUSTER');
              DELETE FROM CCST_DW_CLAIMANT_ADJUSTER
              WHERE  CCST_DW_CLAIMANT_ADJUSTER = V_CCST_DW_CLAIMANT_ADJUSTER.CCST_DW_CLAIMANT_ADJUSTER;
              V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
              IF V_COMMIT_COUNT > 999 THEN
                 COMMIT;
                 V_COMMIT_COUNT := 0;
               END IF;
           END LOOP;
            --  DBMS_OUTPUT.PUT_LINE('DELETING CLAIMANT DETAILS - END');
           COMMIT;
        END;
   
        OPEN CUR_CC_CLAIMANT_ADJUSTER;
        LOOP
            FETCH CUR_CC_CLAIMANT_ADJUSTER INTO REC_CLAIMANT_ADJUSTER;
            EXIT WHEN CUR_CC_CLAIMANT_ADJUSTER%NOTFOUND;
      
            
         --INITIALIZE VARIABLES AGAIN.
          V_IA_STATUS := '';
          V_TEMP_IA_STATUS := 'ZZ';
          
      -- check if IA was closed and COL is open, check the IA status.
      IF REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE IS NOT NULL AND
         (UPPER (REC_CLAIMANT_ADJUSTER.CAUSE_STATUS) IN ('OPEN', 'REOPEN'))
      THEN
         V_TEMP_IA_STATUS := 'Closed';
      END IF;
      
      IF REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE IS NOT NULL
              AND (UPPER(REC_CLAIMANT_ADJUSTER.CAUSE_STATUS) IN ('CLOSE', 'CLOSED') OR 
                UPPER(V_TEMP_IA_STATUS) = 'CLOSED' )
      THEN
         V_REC_COUNT := 0;
         V_IA_STATUS := '';
         V_TEMP_IA_STATUS := 'ZZ';

         -- CHECK IF IA WAS REPORTED EARLIER FOR CLOSE COUNT
         BEGIN
            SELECT COUNT ( * )
              INTO V_REC_COUNT
              FROM CCST_DW_CLAIMANT_ADJUSTER DCA
             WHERE     CLAIM_KEY = REC_CLAIMANT_ADJUSTER.CLAIM_KEY
                   AND CLAIMANT_KEY = REC_CLAIMANT_ADJUSTER.CLAIMANT_KEY
                   AND CLAIMANT_COVERAGE = REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE
                   AND UPPER(IND_ADJUSTER_STATUS) IN ('WORKCOMPLETE','CLOSED', 'CLOSE') 
                   AND TRANS_DATE <= REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE;

            IF V_REC_COUNT = 0
            THEN
                 --CHECK IN CLAIMANT DETAIL TABLE
                 SELECT COUNT ( * )
                   INTO V_REC_COUNT
                   FROM CCST_DW_CLAIMANT_DETAIL
                  WHERE CLAIMANT_COVERAGE = REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE
                        AND INDEPENDENT_ADJUSTER IS NOT NULL
                        AND UPPER(TRANS_TYPE) IN
                                 ('CLOSE', 'CLOSED', 'FINAL PAYMENT') 
               ORDER BY TRANS_DATE ASC;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               V_REC_COUNT := 0;
         END;

         IF V_REC_COUNT > 0
         THEN
            -- THIS COL WAS  REPORTED ONCE AS CLOSED. NOT REPORTING AGAIN.
            --SO SETTING DIFFERENT STATUS
            V_IA_STATUS := 'ReClosed';
         ELSE
            --CHECKFOR A SCENARIO WHERE USER CHANGED AN IA AND CLOSED IA.
            --SO CHECK IF AN IA WAS COUNTED AS OPEN EARLIER
            SELECT COUNT ( * )
              INTO V_REC_COUNT
              FROM CCST_DW_CLAIMANT_ADJUSTER DCA
             WHERE     CLAIM_KEY = REC_CLAIMANT_ADJUSTER.CLAIM_KEY
                   AND CLAIMANT_KEY = REC_CLAIMANT_ADJUSTER.CLAIMANT_KEY
                   AND CLAIMANT_COVERAGE = REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE
                   AND UPPER(IND_ADJUSTER_STATUS) IN ('INPROGRESS','OPEN', 'REOPEN')
                   AND TRANS_DATE <= REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE;

            IF  V_REC_COUNT > 0
            THEN
               -- IA WAS COUNTED AS OPEN. ADD RECORD FOR CLIOSING AN IA.
                V_IA_STATUS := 'Closed';
                V_TEMP_IA_STATUS := 'Closed';

                --CHECK IF THE OPEN AND CLOSE DATES ARE SAME. OR LESS THAN CLOSE DATE IN THE SAME MONTH
                --IF YES THEN COL IS OPENED AND CLOSED ON THE SAME DAY. SO TWO ENTRIES NEED TO BE MADE.
                --OPEN ENTRY IS MADE HERE. CLOSED ENTRY WILL BE MADE DOWN THE LOOP.
            ELSIF REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE IS NOT NULL
               AND REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE >= REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE
               AND REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE > TRUNC(REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE,'MM')
            THEN
               V_IA_STATUS := 'Open';

                INSERT INTO CCST_DW_CLAIMANT_ADJUSTER (
                              CLAIM_KEY                                   
                            , CLAIMANT_KEY                                
                            , DEPT_NBR                                   
                            , DEPT_DESC                                 
                            , BUSINESS_LINE_NAME                       
                            , MAJOR_LINE_NAME                           
                            , LINE_NBR                                    
                            , COVERAGE_LINE_DESC                        
                            , A_S_LINE_NBR                              
                            , A_S_LINE_DESC                           
                            , CAUSE_OF_LOSS                             
                            , CAUSE_GROUP                               
                            , TRANS_DATE                                        
                            , OPERATOR_ID                             
                            , CLAIMANT_COVERAGE                               
                            , STAFF_ADJUSTER                            
                            , ADJUSTER_SUPERVISOR                      
                            , HOME_OFFICE_SUPERVISOR                    
                            , STAFF_ADJUSTER_BRANCH                      
                            , STAFF_ADJUSTER_BRANCH_NAME           
                            , INDEPENDENT_ADJUSTER                      
                            , IND_ADJUSTER_STATUS                      
                            , IA_OPEN_DATE                                      
                                
                                         
            ) VALUES (
                 REC_CLAIMANT_ADJUSTER.CLAIM_KEY,
                REC_CLAIMANT_ADJUSTER.CLAIMANT_KEY,
                REC_CLAIMANT_ADJUSTER.DEPT_NBR,
                REC_CLAIMANT_ADJUSTER.DEPT_DESC,
                REC_CLAIMANT_ADJUSTER.BUSINESS_LINE_NAME,
                REC_CLAIMANT_ADJUSTER.MAJOR_LINE_NAME,-- MAJOR_LINE_NAME                          
                REC_CLAIMANT_ADJUSTER.COVERAGE_LINE_NBR, -- LINE_NBR                                  
                REC_CLAIMANT_ADJUSTER.COVERAGE_LINE_DESC,  -- COVERAGE_LINE_DESC                      
                REC_CLAIMANT_ADJUSTER.A_S_LINE_NBR, -- A_S_LINE_NBR                               
                REC_CLAIMANT_ADJUSTER.A_S_LINE_DESC, -- A_S_LINE_DESC  
                REC_CLAIMANT_ADJUSTER.CAUSE_OF_LOSS,
                REC_CLAIMANT_ADJUSTER.CAUSE_GROUP,
                REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE,
                REC_CLAIMANT_ADJUSTER.OPERATOR_ID,
                REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE,
                REC_CLAIMANT_ADJUSTER.STAFF_ADJUSTER,
                REC_CLAIMANT_ADJUSTER.ADJUSTER_SUPERVISOR,
                '', --  HOME_OFFICE_SUPERVISOR I.E, WILL BE EMPTY CC CLAIMS
                REC_CLAIMANT_ADJUSTER.STAFF_ADJ_BRANCH_NUMBER, -- STAFF_ADJUSTER_BRANCH                       
                REC_CLAIMANT_ADJUSTER.STAFF_ADJ_BRANCH_NAME, -- STAFF_ADJUSTER_BRANCH_NAME 
                REC_CLAIMANT_ADJUSTER.INDEPENDENT_ADJUSTER, -- INDEPENDENT_ADJUSTER
                V_IA_STATUS, -- IND_ADJUSTER_STATUS
                REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE -- IA_OPEN_DATE                                      
                                  
               );

               --IF THE COL IS OPEN AND IA IS CLOSED, CLOSE IA TEMPORARILY.
                V_TEMP_IA_STATUS := 'Closed';
            END IF;

            --THIS COL WAS NOT YET REPORTED AS CLOSED
            V_IA_STATUS := 'Closed';
         END IF;

         V_TRANS_DATE := REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE;
      END IF;
	  
	   -- FOR IA OPEN DATE AND THE COL STATUS AS OPEN OR REOPEN
      -- SET IA STATUS TO OPEN OR REOPEN
      IF REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE IS NOT NULL
         AND UPPER(REC_CLAIMANT_ADJUSTER.CAUSE_STATUS) IN ('OPEN', 'REOPEN')
         AND UPPER(V_TEMP_IA_STATUS) NOT IN ('CLOSED', 'RECLOSED')
      THEN
         --CHECKFOR A SCENARIO WHERE USER CHANGED AN IA AND CLOSED IA.
         --SO CHECK IF AN IA WAS COUNTED AS OPEN EARLIER
        SELECT COUNT ( * )
          INTO V_REC_COUNT
          FROM DW_CLAIMANT_ADJUSTER DCA
         WHERE     CLAIM_KEY = REC_CLAIMANT_ADJUSTER.CLAIM_KEY
               AND CLAIMANT_KEY = REC_CLAIMANT_ADJUSTER.CLAIMANT_KEY
               AND CLAIMANT_COVERAGE = REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE
               AND UPPER(IND_ADJUSTER_STATUS) IN ('OPEN', 'REOPEN')
               AND TRANS_DATE < REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE;


          IF REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE IS NOT NULL OR
              V_REC_COUNT > 0
         THEN
            --THIS COL WAS REPORTED EARLIER. DO NOT REPORT AGAIN
            V_IA_STATUS := 'ReOpen';
         ELSE
               --NEWLY OPEN IA
               V_IA_STATUS := 'Open';
         END IF;

         V_TRANS_DATE := REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE;
      END IF;
            
             INSERT INTO CCST_DW_CLAIMANT_ADJUSTER (
                              CLAIM_KEY                                   
                            , CLAIMANT_KEY                                
                            , DEPT_NBR                                   
                            , DEPT_DESC                                 
                            , BUSINESS_LINE_NAME                       
                            , MAJOR_LINE_NAME                           
                            , LINE_NBR                                    
                            , COVERAGE_LINE_DESC                        
                            , A_S_LINE_NBR                              
                            , A_S_LINE_DESC                           
                            , CAUSE_OF_LOSS                             
                            , CAUSE_GROUP                               
                            , TRANS_DATE                                        
                            , OPERATOR_ID                             
                            , CLAIMANT_COVERAGE                               
                            , STAFF_ADJUSTER                            
                            , ADJUSTER_SUPERVISOR                      
                            , HOME_OFFICE_SUPERVISOR                    
                            , STAFF_ADJUSTER_BRANCH                      
                            , STAFF_ADJUSTER_BRANCH_NAME           
                            , INDEPENDENT_ADJUSTER                      
                            , IND_ADJUSTER_STATUS                      
                            , IA_OPEN_DATE                                      
                            , IA_CLOSE_DATE                                     
                            , ASSISTANT_ADJUSTER                       
                            , AA_ADJUSTER_STATUS                      
                            , AA_OPEN_DATE                                      
                            , AA_CLOSE_DATE                          
                            , PUBLICID                            
                            , CREATE_ID                           
                            , FIRST_MODIFIED                       
                            , AUDIT_ID                             
                            , LAST_MODIFIED                          
            ) VALUES (
                 REC_CLAIMANT_ADJUSTER.CLAIM_KEY,
                REC_CLAIMANT_ADJUSTER.CLAIMANT_KEY,
                REC_CLAIMANT_ADJUSTER.DEPT_NBR,
                REC_CLAIMANT_ADJUSTER.DEPT_DESC,
                REC_CLAIMANT_ADJUSTER.BUSINESS_LINE_NAME,
                REC_CLAIMANT_ADJUSTER.MAJOR_LINE_NAME,-- MAJOR_LINE_NAME                          
                REC_CLAIMANT_ADJUSTER.COVERAGE_LINE_NBR, -- LINE_NBR                                  
                REC_CLAIMANT_ADJUSTER.COVERAGE_LINE_DESC,  -- COVERAGE_LINE_DESC                      
                REC_CLAIMANT_ADJUSTER.A_S_LINE_NBR, -- A_S_LINE_NBR                               
                REC_CLAIMANT_ADJUSTER.A_S_LINE_DESC, -- A_S_LINE_DESC  
                REC_CLAIMANT_ADJUSTER.CAUSE_OF_LOSS,
                REC_CLAIMANT_ADJUSTER.CAUSE_GROUP,
                REC_CLAIMANT_ADJUSTER.TRANS_DATE,
                REC_CLAIMANT_ADJUSTER.OPERATOR_ID,
                REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE,
                REC_CLAIMANT_ADJUSTER.STAFF_ADJUSTER,
                REC_CLAIMANT_ADJUSTER.ADJUSTER_SUPERVISOR,
                '', --  HOME_OFFICE_SUPERVISOR I.E, WILL BE EMPTY CC CLAIMS
                REC_CLAIMANT_ADJUSTER.STAFF_ADJ_BRANCH_NUMBER, -- STAFF_ADJUSTER_BRANCH                       
                REC_CLAIMANT_ADJUSTER.STAFF_ADJ_BRANCH_NAME, -- STAFF_ADJUSTER_BRANCH_NAME 
                REC_CLAIMANT_ADJUSTER.INDEPENDENT_ADJUSTER, -- INDEPENDENT_ADJUSTER
                V_IA_STATUS, -- IND_ADJUSTER_STATUS
                DECODE (V_IA_STATUS,
                          'Open', REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE,
                          'ReOpen', REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE,
                          NULL), --REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE, -- IA_OPEN_DATE                                      
                DECODE (V_IA_STATUS,
                          'Closed', REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE,
                          'ReClosed', REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE,
                          NULL),--REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE, -- IA_CLOSE_DATE                                     
                '', -- ASSISTANT_ADJUSTER  I.E, WILL BE EMPTY CC CLAIMS                    
                '', -- AA_ADJUSTER_STATUS    I.E, WILL BE EMPTY CC CLAIMS                    
                '', -- AA_OPEN_DATE                                      
                '', -- AA_CLOSE_DATE  
                REC_CLAIMANT_ADJUSTER.PUBLICID,
                REC_CLAIMANT_ADJUSTER.CREATEUSERID,
                REC_CLAIMANT_ADJUSTER.CREATETIME,
                REC_CLAIMANT_ADJUSTER.AUDITID,
                REC_CLAIMANT_ADJUSTER.CL_UPDATETIME
            );
            
          V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
          IF V_COMMIT_COUNT > 999 THEN
             COMMIT;
             V_COMMIT_COUNT := 0;
          END IF;
        END LOOP;

        CLOSE CUR_CC_CLAIMANT_ADJUSTER;
        COMMIT;
   
        -- BULK INSERET INTO CC ARCHIVE TABLE
        SP_CCSTA_DW_CLMT_ADJ_BINSERT(START_DATE, END_DATE);
        COMMIT;
        
        IF SYSDATE = LAST_DAY(SYSDATE) THEN
            DELETE FROM CCST_DW_CLAIMANT_ADJUSTER
            WHERE TRUNC(LAST_MODIFIED) >= TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), - 2) + 1) 
            AND  TRUNC(LAST_MODIFIED) < ADD_MONTHS((LAST_DAY(SYSDATE)+1),-1);
            COMMIT;
        END IF;
        
        --INSERET DATA INTO DW_CLAIMANT_DETAI
       SP_UPDATE_CCST_TO_DW_CLMT_ADJ(V_SDATE,V_EDATE);
       COMMIT;
       
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;     
 
EXCEPTION
   WHEN STANDARD.NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20201, 'DATA SELECTION NOT SUCCESSFUL.');
   WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR (-20001, 'SP_CCST_DW_CLAIMANT_ADJUSTER. ' ||SQLERRM);
END SP_CCST_DW_CLAIMANT_ADJUSTER;


PROCEDURE SP_CCSTA_DW_CLAIM_BINSERT (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) AS

        TYPE CCST_CLAIM IS TABLE OF CCST_DW_CLAIM%ROWTYPE INDEX BY BINARY_INTEGER;
        CCST_CLAIM_LIST CCST_CLAIM;
        START_TIME      NUMBER;
        END_TIME        NUMBER;
        V_RUN_DATE      NUMBER;
        V_SDATE    DATE;
        V_EDATE    DATE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
        
         -- INSERT RECORD IN RUN_DATE TABLE FOR SP_CCSTA_DW_CLAIM_BULKINSERT
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCSTA_DW_CLAIM_BINSERT',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

       -- BULK INSERT LOGIC TO INSERT DATA INTO CCSTA_DW_CLAIM
        SELECT *
        BULK COLLECT
        INTO CCST_CLAIM_LIST
        FROM CCST_DW_CLAIM;
        --WHERE TRUNC(LAST_MODIFIED) >= TRUNC(TO_DATE(V_SDATE,'DD-MON-YYYY')) 
        --AND TRUNC(LAST_MODIFIED) < TRUNC(TO_DATE(V_EDATE,'DD-MON-YYYY'));

        START_TIME := DBMS_UTILITY.GET_TIME;
        FORALL I IN CCST_CLAIM_LIST.FIRST..CCST_CLAIM_LIST.LAST
            INSERT INTO CCSTA_DW_CLAIM VALUES CCST_CLAIM_LIST ( I );

        END_TIME := DBMS_UTILITY.GET_TIME;
        
        -- UPDATE RUN_DATE TABLE AFTER BULK INSERT OPERATION
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;

        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'NO DATA FOUND. ' || SQLERRM);
            ROLLBACK;
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'SP_CCSTA_DW_CLAIM_BINSERT. ' || SQLERRM);
            ROLLBACK;
END SP_CCSTA_DW_CLAIM_BINSERT;

PROCEDURE SP_CCSTA_DW_CLAIMANT_BINSERT (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) AS

        TYPE CCST_CLAIMANT IS TABLE OF CCST_DW_CLAIMANT%ROWTYPE INDEX BY BINARY_INTEGER;
        CCST_CLAIMANT_LIST CCST_CLAIMANT;
        START_TIME         NUMBER;
        END_TIME           NUMBER;
        V_RUN_DATE         NUMBER;
        V_SDATE    DATE;
        V_EDATE    DATE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
  
        -- INSERT RECORD IN RUN_DATE TABLE FOR SP_CCSTA_DW_CLAIMANT_BINSERT
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCSTA_DW_CLAIMANT_BINSERT',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

       -- BULK INSERT LOGIC TO INSERT DATA INTO CCSTA_DW_CLAIMANT
        SELECT *
        BULK COLLECT
        INTO CCST_CLAIMANT_LIST
        FROM CCST_DW_CLAIMANT;
       -- WHERE TRUNC(LAST_MODIFIED) >= TRUNC(TO_DATE(V_SDATE,'DD-MON-YYYY')) 
       -- AND TRUNC(LAST_MODIFIED) < TRUNC(TO_DATE(V_EDATE,'DD-MON-YYYY'));

        START_TIME := DBMS_UTILITY.GET_TIME;
        FORALL I IN CCST_CLAIMANT_LIST.FIRST..CCST_CLAIMANT_LIST.LAST
            INSERT INTO CCSTA_DW_CLAIMANT VALUES CCST_CLAIMANT_LIST ( I );
        END_TIME := DBMS_UTILITY.GET_TIME;
            
        -- UPDATE RUN_DATE TABLE AFTER BULK INSERT OPERATION
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'NO DATA FOUND. ' || SQLERRM);
            ROLLBACK;
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'SP_CCSTA_DW_CLAIMANT_BINSERT. ' || SQLERRM);
            ROLLBACK;
END SP_CCSTA_DW_CLAIMANT_BINSERT;

PROCEDURE SP_CCSTA_DW_CLMT_DT_BINSERT (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) AS

        TYPE CCST_CLMT_DT IS TABLE OF CCST_DW_CLAIMANT_DETAIL%ROWTYPE INDEX BY BINARY_INTEGER;
        CCST_CLMT_DT_LIST CCST_CLMT_DT;
        START_TIME        NUMBER;
        END_TIME          NUMBER;
        V_RUN_DATE        NUMBER;
        V_SDATE    DATE;
        V_EDATE    DATE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');
        
          -- INSERT RECORD IN RUN_DATE TABLE FOR SP_CCSTA_DW_CLMT_DT_BINSERT
        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCSTA_DW_CLMT_DT_BINSERT',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

       -- BULK INSERT LOGIC TO INSERT DATA INTO CCSTA_DW_CLAIMANT_DETAIL
        SELECT *
        BULK COLLECT
        INTO CCST_CLMT_DT_LIST
        FROM CCST_DW_CLAIMANT_DETAIL;
       -- WHERE TRUNC(LAST_MODIFIED) >= TRUNC(TO_DATE(V_SDATE,'DD-MON-YYYY')) 
       -- AND TRUNC(LAST_MODIFIED) < TRUNC(TO_DATE(V_EDATE,'DD-MON-YYYY'));

        START_TIME := DBMS_UTILITY.GET_TIME;
        FORALL I IN CCST_CLMT_DT_LIST.FIRST..CCST_CLMT_DT_LIST.LAST
            INSERT INTO CCSTA_DW_CLAIMANT_DETAIL VALUES CCST_CLMT_DT_LIST ( I );

        END_TIME := DBMS_UTILITY.GET_TIME;

        -- UPDATE RUN_DATE TABLE AFTER BULK INSERT OPERATION
        UPDATE RUN_DATE
        SET
            END_TIME = SYSDATE
        WHERE
            RUN_DATE = V_RUN_DATE;

        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'NO DATA FOUND. ' || SQLERRM);
            ROLLBACK;
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'SP_CCSTA_DW_CLMT_DT_BINSERT. ' || SQLERRM);
            ROLLBACK;
END SP_CCSTA_DW_CLMT_DT_BINSERT;

PROCEDURE SP_CCSTA_DW_CLMT_ADJ_BINSERT (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) AS

        TYPE CCST_CLMT_ADJ IS
            TABLE OF CCST_DW_CLAIMANT_ADJUSTER%ROWTYPE INDEX BY BINARY_INTEGER;
        CCST_CLMT_ADJ_LIST CCST_CLMT_ADJ;
        START_TIME         NUMBER;
        END_TIME           NUMBER;
        V_RUN_DATE         NUMBER;
        V_SDATE    DATE;
        V_EDATE    DATE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');

        -- INSERT RECORD IN RUN_DATE TABLE FOR SP_CCSTA_DW_CLMT_ADJ_BINSERT
        SELECT
            SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM
            DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_CCSTA_DW_CLMT_ADJ_BINSERT',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

       -- BULK INSERT LOGIC TO INSERT DATA INTO CCSTA_DW_CLAIMANT_ADJUSTER
        SELECT *
        BULK COLLECT
        INTO CCST_CLMT_ADJ_LIST
        FROM CCST_DW_CLAIMANT_ADJUSTER;
      --  WHERE TRUNC(LAST_MODIFIED) >= TRUNC(TO_DATE(V_SDATE,'DD-MON-YYYY')) 
      --  AND TRUNC(LAST_MODIFIED) < TRUNC(TO_DATE(V_EDATE,'DD-MON-YYYY'));

        START_TIME := DBMS_UTILITY.GET_TIME;
        
        FORALL I IN CCST_CLMT_ADJ_LIST.FIRST..CCST_CLMT_ADJ_LIST.LAST
            INSERT INTO CCSTA_DW_CLAIMANT_ADJUSTER VALUES CCST_CLMT_ADJ_LIST ( I );
        END_TIME := DBMS_UTILITY.GET_TIME;

        -- UPDATE RUN_DATE TABLE AFTER BULK INSERT OPERATION
        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'NO DATA FOUND. ' || SQLERRM);
            ROLLBACK;
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'SP_CCSTA_DW_CLMT_ADJ_BINSERT. ' || SQLERRM);
            ROLLBACK;
END SP_CCSTA_DW_CLMT_ADJ_BINSERT;


PROCEDURE SP_UPDATE_CCST_TO_DW_CLAIM (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) IS
    
    V_ICNT			NUMBER := 0 ;
	V_UCNT			NUMBER := 0 ;
    V_COMMIT_COUNT  NUMBER;
    V_CCST_DW_CLAIM NUMBER;
    V_RUN_DATE NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    V_SOURCE VARCHAR(20) := 'CC';
	
      CURSOR CUR_CC_INTO_DW_CLAIM IS
        SELECT   CLAIM_KEY,
                DEC_KEY,
                INSURED_NAME,
                AGENCY_NAME,
                WRITING_COMPANY,
                CLAIM_NBR,
                SIZE_OF_LOSS,
                DATE_OF_LOSS,
                CLAIM_STATUS,
                CLAIM_STATUS_DATE,
                SOURCE
        FROM CCST_DW_CLAIM
        WHERE LAST_MODIFIED >= START_DATE
        ORDER BY LAST_MODIFIED;

        REC_CLAIM CUR_CC_INTO_DW_CLAIM%ROWTYPE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');


        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_UPDATE_CCST_TO_DW_CLAIM',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );
        COMMIT;

        OPEN CUR_CC_INTO_DW_CLAIM;
        LOOP
            FETCH CUR_CC_INTO_DW_CLAIM INTO REC_CLAIM;
            EXIT WHEN CUR_CC_INTO_DW_CLAIM%NOTFOUND;

        BEGIN    
        SELECT DW_CLAIM
		INTO V_CCST_DW_CLAIM
		FROM DW_CLAIM
		WHERE CLAIM_KEY = REC_CLAIM.CLAIM_KEY AND SOURCE = V_SOURCE
        ;

        UPDATE DW_CLAIM
		SET CLAIM_KEY = REC_CLAIM.CLAIM_KEY,
			DEC_KEY = REC_CLAIM.DEC_KEY,
			INSURED_NAME = REC_CLAIM.INSURED_NAME,
			AGENCY_NAME = REC_CLAIM.AGENCY_NAME,
			WRITING_COMPANY = REC_CLAIM.WRITING_COMPANY,
			CLAIM_NBR = REC_CLAIM.CLAIM_NBR,
            SIZE_OF_LOSS = REC_CLAIM.SIZE_OF_LOSS,
			DATE_OF_LOSS = REC_CLAIM.DATE_OF_LOSS,
			CLAIM_STATUS = REC_CLAIM.CLAIM_STATUS,
			CLAIM_STATUS_DATE = REC_CLAIM.CLAIM_STATUS_DATE,
            LOAD_DATE = SYSDATE
		WHERE DW_CLAIM = V_CCST_DW_CLAIM;
        V_UCNT := V_UCNT + 1 ;    

        EXCEPTION WHEN NO_DATA_FOUND THEN
	    INSERT INTO DW_CLAIM (DW_CLAIM,
					CLAIM_KEY,
					DEC_KEY,
					INSURED_NAME,
					AGENCY_NAME,
					WRITING_COMPANY,
					CLAIM_NBR,
                    SIZE_OF_LOSS,
					DATE_OF_LOSS,
					CLAIM_STATUS,
					CLAIM_STATUS_DATE,
                    SOURCE,
                    LOAD_DATE)  
			VALUES (SEQ_DW_CLAIM.NEXTVAL,
					REC_CLAIM.CLAIM_KEY,
					REC_CLAIM.DEC_KEY,
					REC_CLAIM.INSURED_NAME,
					REC_CLAIM.AGENCY_NAME,
					REC_CLAIM.WRITING_COMPANY,
					REC_CLAIM.CLAIM_NBR,
                    REC_CLAIM.SIZE_OF_LOSS,
					REC_CLAIM.DATE_OF_LOSS,
					REC_CLAIM.CLAIM_STATUS,
					REC_CLAIM.CLAIM_STATUS_DATE,
                    REC_CLAIM.SOURCE,
                    SYSDATE);
            V_ICNT := V_ICNT + 1 ;
            END ;     

           V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
           IF V_COMMIT_COUNT > 999 THEN
           COMMIT;
           V_COMMIT_COUNT := 0;
           END IF;

        END LOOP;
        CLOSE CUR_CC_INTO_DW_CLAIM;
        COMMIT;


        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
END SP_UPDATE_CCST_TO_DW_CLAIM;
    
PROCEDURE SP_UPDATE_CCST_TO_DW_CLAIMANT (
        START_DATE IN DATE,
        END_DATE   IN DATE
    ) IS

               
	V_ICNT			NUMBER := 0 ;
	V_UCNT			NUMBER := 0 ;
    V_COMMIT_COUNT  NUMBER;
    V_CCST_DW_CLAIMANT NUMBER;
    V_RUN_DATE NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    V_SOURCE VARCHAR(20) := 'CC';
	
        CURSOR CUR_CC_INTO_DW_CLAIMANT IS
        SELECT    POLICY_KEY,
                CLAIM_KEY,
                CLAIMANT_KEY,
                POLICY_NBR,
                INSURED_NAME,
                AGENCY_CODE,
                AGENCY_NAME,
                AGENCY_STATE,
                WRITING_COMPANY,
                POLICY_BRANCH_NBR,
                POLICY_BRANCH_NAME,
                CLAIM_BRANCH_NBR,
                CLAIM_BRANCH_NAME,
                CLAIM_NBR,
                DATE_OF_LOSS,
                CLAIM_STATUS,
                SIZE_OF_LOSS,
                CAT_NBR,
                CAT_DESC,
                CITY,
                STATE,
                COUNTY,
                LAWSUIT_STATUS,
                SUIT_TYPE,
                REINS_REASON,
                CLAIMANT_NAME,
                STAFF_ADJUSTER,
                SUPERVISOR,
                IND_ADJUSTER,
                HOME_SUPERVISOR,
                WRITING_COMPANY_NBR,
                ATTORNEY,
                BUSINESS_NAME,
                SOURCE
        FROM CCST_DW_CLAIMANT
        WHERE LAST_MODIFIED >= START_DATE
        ORDER BY LAST_MODIFIED;

        REC_CLAIMANT CUR_CC_INTO_DW_CLAIMANT%ROWTYPE;
    BEGIN
       V_SDATE := START_DATE;
       V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');

        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_UPDATE_CCST_TO_DW_CLAIMANT',
            V_SDATE,
            NULL,
            USER,
            SYSDATE
        );
        COMMIT;

        OPEN CUR_CC_INTO_DW_CLAIMANT;
        LOOP
            FETCH CUR_CC_INTO_DW_CLAIMANT INTO REC_CLAIMANT;
            EXIT WHEN CUR_CC_INTO_DW_CLAIMANT%NOTFOUND;

        BEGIN    
        SELECT DW_CLAIMANT
		INTO V_CCST_DW_CLAIMANT
		FROM DW_CLAIMANT
		WHERE CLAIM_KEY = REC_CLAIMANT.CLAIM_KEY
        AND   CLAIMANT_KEY =  REC_CLAIMANT.CLAIMANT_KEY
		AND SOURCE = V_SOURCE
        ;

        UPDATE DW_CLAIMANT
        SET CLAIM_BRANCH_NBR = REC_CLAIMANT.CLAIM_BRANCH_NBR,
			CLAIM_BRANCH_NAME = REC_CLAIMANT.CLAIM_BRANCH_NAME,
			DATE_OF_LOSS = REC_CLAIMANT.DATE_OF_LOSS,
			CLAIM_STATUS = REC_CLAIMANT.CLAIM_STATUS,
            CAT_NBR = REC_CLAIMANT.CAT_NBR,
			CAT_DESC = REC_CLAIMANT.CAT_DESC,
			CITY = REC_CLAIMANT.CITY,
			STATE = REC_CLAIMANT.STATE,
			COUNTY = REC_CLAIMANT.COUNTY,
            LAWSUIT_STATUS = REC_CLAIMANT.LAWSUIT_STATUS,
            SUIT_TYPE = REC_CLAIMANT.SUIT_TYPE,
			REINS_REASON = '', -- I.E, WILL BE EMPTY FOR CC
			CLAIMANT_NAME = REC_CLAIMANT.CLAIMANT_NAME,
			STAFF_ADJUSTER = REC_CLAIMANT.STAFF_ADJUSTER,
			SUPERVISOR = REC_CLAIMANT.SUPERVISOR,
			IND_ADJUSTER = REC_CLAIMANT.IND_ADJUSTER,
			HOME_SUPERVISOR = REC_CLAIMANT.HOME_SUPERVISOR,
			POLICY_KEY = POLICY_KEY,
			POLICY_NBR = REC_CLAIMANT.POLICY_NBR,--POLICY_NBR,
			INSURED_NAME = REC_CLAIMANT.INSURED_NAME,--INSURED_NAME,
			AGENCY_CODE = REC_CLAIMANT.AGENCY_CODE,
			AGENCY_NAME = REC_CLAIMANT.AGENCY_NAME,
			AGENCY_STATE = REC_CLAIMANT.AGENCY_STATE,
			WRITING_COMPANY = REC_CLAIMANT.WRITING_COMPANY,
			POLICY_BRANCH_NBR =REC_CLAIMANT.POLICY_BRANCH_NBR, -- REC_CLAIMANT.CLAIM_BRANCH_NBR,
			POLICY_BRANCH_NAME = REC_CLAIMANT.POLICY_BRANCH_NAME,
			WRITING_COMPANY_NBR = REC_CLAIMANT.WRITING_COMPANY_NBR,--WRITING_COMPANY_NBR,
            ATTORNEY = REC_CLAIMANT.ATTORNEY, 
            BUSINESS_NAME = REC_CLAIMANT.BUSINESS_NAME,
            CLAIM_NBR=REC_CLAIMANT.CLAIM_NBR,
            LOAD_DATE = SYSDATE
		WHERE DW_CLAIMANT = V_CCST_DW_CLAIMANT;
        V_UCNT := V_UCNT + 1 ;    

        EXCEPTION WHEN NO_DATA_FOUND THEN
	    INSERT INTO DW_CLAIMANT (DW_CLAIMANT,
					         POLICY_KEY,
                            CLAIM_KEY,
                            CLAIMANT_KEY,
                            POLICY_NBR,
                            INSURED_NAME,
                            AGENCY_CODE,
                            AGENCY_NAME,
                            AGENCY_STATE,
                            WRITING_COMPANY,
                            POLICY_BRANCH_NBR,
                            POLICY_BRANCH_NAME,
                            CLAIM_BRANCH_NBR,
                            CLAIM_BRANCH_NAME,
                            CLAIM_NBR,
                            DATE_OF_LOSS,
                            CLAIM_STATUS,
                            SIZE_OF_LOSS,
                            CAT_NBR,
                            CAT_DESC,
                            CITY,
                            STATE,
                            COUNTY,
                            LAWSUIT_STATUS,
                            SUIT_TYPE,
                            REINS_REASON,
                            CLAIMANT_NAME,
                            STAFF_ADJUSTER,
                            SUPERVISOR,
                            IND_ADJUSTER,
                            HOME_SUPERVISOR,
                            WRITING_COMPANY_NBR,
                            ATTORNEY,
                            BUSINESS_NAME,
                            SOURCE,
                            LOAD_DATE)  
			VALUES (SEQ_DW_CLAIMANT.NEXTVAL,
                REC_CLAIMANT.POLICY_KEY,
                REC_CLAIMANT.CLAIM_KEY,
                REC_CLAIMANT.CLAIMANT_KEY,
                REC_CLAIMANT.POLICY_NBR,
                REC_CLAIMANT.INSURED_NAME,
                REC_CLAIMANT.AGENCY_CODE,
                REC_CLAIMANT.AGENCY_NAME,
                REC_CLAIMANT.AGENCY_STATE,
                REC_CLAIMANT.WRITING_COMPANY,
                REC_CLAIMANT.POLICY_BRANCH_NBR, -- POLICY_BRANCH_NBR 
                REC_CLAIMANT.POLICY_BRANCH_NAME, -- POLICY_BRANCH_NAME           
                REC_CLAIMANT.CLAIM_BRANCH_NBR, -- CLAIM_BRANCH_NBR                 
                REC_CLAIMANT.CLAIM_BRANCH_NAME, -- CLAIM_BRANCH_NAME 
                REC_CLAIMANT.CLAIM_NBR,
                REC_CLAIMANT.DATE_OF_LOSS,
                REC_CLAIMANT.CLAIM_STATUS,
                REC_CLAIMANT.SIZE_OF_LOSS, -- SIZE_OF_LOSS IS CLAIM_PREFIX I.E, USING 'C' AS HARD CODED VALUE SINCE NO REFERENCE IN CC
                REC_CLAIMANT.CAT_NBR,
                REC_CLAIMANT.CAT_DESC,
                REC_CLAIMANT.CITY,
                REC_CLAIMANT.STATE,
                REC_CLAIMANT.COUNTY,
                REC_CLAIMANT.LAWSUIT_STATUS, -- LAWSUIT_STATUS IS SUIT_STATUS_DESC
                REC_CLAIMANT.SUIT_TYPE,
                REC_CLAIMANT.REINS_REASON, -- REINS_REASON
                REC_CLAIMANT.CLAIMANT_NAME,
                REC_CLAIMANT.STAFF_ADJUSTER,
                REC_CLAIMANT.SUPERVISOR,
                REC_CLAIMANT.IND_ADJUSTER, --NVL(IA.BUSINESS_NAME, IA.VENDOR_NAME) IND_ADJUSTER
                REC_CLAIMANT.HOME_SUPERVISOR,
                REC_CLAIMANT.WRITING_COMPANY_NBR,
                REC_CLAIMANT.ATTORNEY,
                REC_CLAIMANT.BUSINESS_NAME,
                REC_CLAIMANT.SOURCE,
                SYSDATE);
            V_ICNT := V_ICNT + 1 ;
            END ;     

           V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
           IF V_COMMIT_COUNT > 999 THEN
           COMMIT;
           V_COMMIT_COUNT := 0;
           END IF;

        END LOOP;
        CLOSE CUR_CC_INTO_DW_CLAIMANT;
        COMMIT;


        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
END SP_UPDATE_CCST_TO_DW_CLAIMANT;

PROCEDURE SP_UPDATE_CCST_TO_DW_CLMT_DT(START_DATE IN DATE,END_DATE IN DATE) IS
    V_RUN_DATE NUMBER;
    V_COMMIT_COUNT  NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    V_ICNT			NUMBER := 0 ;
	V_UCNT			NUMBER := 0 ;
    V_SOURCE VARCHAR(20) := 'CC';
    
   
        CURSOR CUR_CC_DW_CLAIMANT_DETAILS IS
        SELECT
              CLAIM_KEY,
                CLAIMANT_KEY,
                DEPT_NBR,
                DEPT_DESC,
                BUSINESS_LINE_NAME,
                MAJOR_LINE_NAME,
                LINE_NBR,
                COVERAGE_LINE_DESC,
                A_S_LINE_NBR,
                A_S_LINE_DESC,
                CAUSE_OF_LOSS,
                CAUSE_GROUP,
                EXPENSE_CODE,
                TREATY_CONTRACT_NBR,
                TRANS_DATE,
                TRANS_TYPE,
                LOSS_PAID,
                UNALLOC_EXPENSE_PAID,
                ALLOC_EXPENSE_PAID,
                LOSS_RESERVE,
                UNALLOC_EXPENSE_RESERVE,
                ALLOC_EXPENSE_RESERVE,
                CEDED_LOSS_PAID,
                CEDED_EXPENSE_PAID,
                CEDED_LOSS_RESERVE,
                CEDED_EXPENSE_RESERVE,
                CHECK_NBR,
                OPERATOR_ID,
                CLAIM_DRAFT_TYPE,
                DRAFT_PAID_AMT,
                CEDED_ULAE_PAID,
                CEDED_ULAE_RESERVE,
                CLAIMANT_COVERAGE,
                CLAIMANT_TRANS,
                STAFF_ADJUSTER,
                ADJUSTER_SUPERVISOR,
                HOME_OFFICE_SUPERVISOR,
                INDEPENDENT_ADJUSTER,
                STAFF_ADJUSTER_BRANCH,
                STAFF_ADJUSTER_BRANCH_NAME,
                SOURCE,
                LAST_MODIFIED
           FROM        
             CCST_DW_CLAIMANT_DETAIL
            WHERE TRANS_DATE >= V_SDATE --AND TRANS_DATE <= V_EDATE
            ORDER BY LAST_MODIFIED;

        REC_CLAIMANT_DETAILS CUR_CC_DW_CLAIMANT_DETAILS%ROWTYPE;
    BEGIN
        V_SDATE := START_DATE;
        V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');

        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_UPDATE_CCST_TO_DW_CLMT_DT',
            V_SDATE,
            V_EDATE,
            USER,
            SYSDATE
        );

        COMMIT;

        BEGIN
        OPEN CUR_CC_DW_CLAIMANT_DETAILS;
        LOOP
            FETCH CUR_CC_DW_CLAIMANT_DETAILS INTO REC_CLAIMANT_DETAILS;
            EXIT WHEN CUR_CC_DW_CLAIMANT_DETAILS%NOTFOUND;
     
              INSERT INTO DW_CLAIMANT_DETAIL (DW_CLAIMANT_DETAIL,
                CLAIM_KEY,
                CLAIMANT_KEY,
                DEPT_NBR,
                DEPT_DESC,
                BUSINESS_LINE_NAME,
                MAJOR_LINE_NAME,
                LINE_NBR,
                COVERAGE_LINE_DESC,
                A_S_LINE_NBR,
                A_S_LINE_DESC,
                CAUSE_OF_LOSS,
                CAUSE_GROUP,
                EXPENSE_CODE,
                TREATY_CONTRACT_NBR,
                TRANS_DATE,
                TRANS_TYPE,
                LOSS_PAID,
                UNALLOC_EXPENSE_PAID,
                ALLOC_EXPENSE_PAID,
                LOSS_RESERVE,
                UNALLOC_EXPENSE_RESERVE,
                ALLOC_EXPENSE_RESERVE,
                CEDED_LOSS_PAID,
                CEDED_EXPENSE_PAID,
                CEDED_LOSS_RESERVE,
                CEDED_EXPENSE_RESERVE,
                CHECK_NBR,
                OPERATOR_ID,
                CLAIM_DRAFT_TYPE,
                DRAFT_PAID_AMT,
                CEDED_ULAE_PAID,
                CEDED_ULAE_RESERVE,
                CLAIMANT_COVERAGE,
                CLAIMANT_TRANS,
                STAFF_ADJUSTER,
                ADJUSTER_SUPERVISOR,
                HOME_OFFICE_SUPERVISOR,
                INDEPENDENT_ADJUSTER,
                STAFF_ADJUSTER_BRANCH,
                STAFF_ADJUSTER_BRANCH_NAME,
                SOURCE,
                LAST_MODIFIED,
                LOAD_DATE
            ) VALUES (
                SEQ_DW_CLAIMANT_DETAIL.NEXTVAL,
                REC_CLAIMANT_DETAILS.CLAIM_KEY,
                REC_CLAIMANT_DETAILS.CLAIMANT_KEY,
                REC_CLAIMANT_DETAILS.DEPT_NBR,
                REC_CLAIMANT_DETAILS.DEPT_DESC,
                REC_CLAIMANT_DETAILS.BUSINESS_LINE_NAME,
                REC_CLAIMANT_DETAILS.MAJOR_LINE_NAME, -- MAJOR_LINE_NAME                          
                REC_CLAIMANT_DETAILS.LINE_NBR, -- LINE_NBR                                  
                REC_CLAIMANT_DETAILS.COVERAGE_LINE_DESC,  -- COVERAGE_LINE_DESC                      
                REC_CLAIMANT_DETAILS.A_S_LINE_NBR, -- A_S_LINE_NBR                               
                REC_CLAIMANT_DETAILS.A_S_LINE_DESC, -- A_S_LINE_DESC  
                REC_CLAIMANT_DETAILS.CAUSE_OF_LOSS,
                REC_CLAIMANT_DETAILS.CAUSE_GROUP,
                REC_CLAIMANT_DETAILS.EXPENSE_CODE,  -- EXPENSE_CODE
                REC_CLAIMANT_DETAILS.TREATY_CONTRACT_NBR,
                REC_CLAIMANT_DETAILS.TRANS_DATE,
                REC_CLAIMANT_DETAILS.TRANS_TYPE,
                REC_CLAIMANT_DETAILS.LOSS_PAID, -- LOSS_PAID
                REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_PAID,           -- UNALLOC_EXPENSE_PAID
                REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_PAID,           -- ALLOC_EXPENSE_PAID
                REC_CLAIMANT_DETAILS.LOSS_RESERVE,   -- LOSS_RESERVE
                REC_CLAIMANT_DETAILS.UNALLOC_EXPENSE_RESERVE,           -- UNALLOC_EXPENSE_RESERVE
                REC_CLAIMANT_DETAILS.ALLOC_EXPENSE_RESERVE,           -- ALLOC_EXPENSE_RESERVE
                REC_CLAIMANT_DETAILS.CEDED_LOSS_PAID,           -- CEDED_LOSS_PAID                         
                REC_CLAIMANT_DETAILS.CEDED_EXPENSE_PAID,           -- CEDED_EXPENSE_PAID                         
                REC_CLAIMANT_DETAILS.CEDED_LOSS_RESERVE,           -- CEDED_LOSS_RESERVE                         
                REC_CLAIMANT_DETAILS.CEDED_EXPENSE_RESERVE,           -- CEDED_EXPENSE_RESERVE  
                REC_CLAIMANT_DETAILS.CHECK_NBR,
                REC_CLAIMANT_DETAILS.OPERATOR_ID,
                REC_CLAIMANT_DETAILS.CLAIM_DRAFT_TYPE,
                REC_CLAIMANT_DETAILS.DRAFT_PAID_AMT,
                REC_CLAIMANT_DETAILS.CEDED_ULAE_PAID,   -- CEDED_ULAE_PAID                            
                REC_CLAIMANT_DETAILS.CEDED_ULAE_RESERVE,   -- CEDED_ULAE_RESERVE  
                REC_CLAIMANT_DETAILS.CLAIMANT_COVERAGE,
                REC_CLAIMANT_DETAILS.CLAIMANT_TRANS,
                REC_CLAIMANT_DETAILS.STAFF_ADJUSTER,
                REC_CLAIMANT_DETAILS.ADJUSTER_SUPERVISOR,
                REC_CLAIMANT_DETAILS.HOME_OFFICE_SUPERVISOR, -- HOME_OFFICE_SUPERVISOR I.E, WILL BE EMPTY CC CLAIMS
                REC_CLAIMANT_DETAILS.INDEPENDENT_ADJUSTER, -- INDEPENDENT_ADJUSTER
                REC_CLAIMANT_DETAILS.STAFF_ADJUSTER_BRANCH,  -- STAFF_ADJUSTER_BRANCH                       
                REC_CLAIMANT_DETAILS.STAFF_ADJUSTER_BRANCH_NAME, -- STAFF_ADJUSTER_BRANCH_NAME 
                REC_CLAIMANT_DETAILS.SOURCE,
                REC_CLAIMANT_DETAILS.LAST_MODIFIED,
                SYSDATE
            );
      V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
      IF V_COMMIT_COUNT > 999 THEN
         COMMIT;
         V_COMMIT_COUNT := 0;
      END IF;
    END LOOP;

        CLOSE CUR_CC_DW_CLAIMANT_DETAILS;
        COMMIT;


    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'NO DATA FOUND. ' || SQLERRM);
            END;
            COMMIT;

        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;
        
        EXCEPTION
             WHEN STANDARD.NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR (-20201, 'DATA SELECTION NOT SUCCESSFUL IN SP_UPDATE_CCST_TO_DW_CLMT_DT..'||SQLERRM);
        
END SP_UPDATE_CCST_TO_DW_CLMT_DT;

PROCEDURE SP_UPDATE_CCST_TO_DW_CLMT_ADJ(START_DATE IN DATE,END_DATE IN DATE) IS
   
    V_RUN_DATE NUMBER;
    V_COMMIT_COUNT  NUMBER;
    V_SDATE    DATE;
    V_EDATE    DATE;
    V_ICNT			NUMBER := 0 ;
	V_UCNT			NUMBER := 0 ;
    V_SOURCE VARCHAR(20) := 'CC';
    
         
        CURSOR CUR_CC_CLAIMANT_ADJUSTER IS
           SELECT
                CLAIM_KEY,
                CLAIMANT_KEY,
                DEPT_NBR,
                DEPT_DESC,
                BUSINESS_LINE_NAME,
                MAJOR_LINE_NAME,
                LINE_NBR,
                COVERAGE_LINE_DESC,
                A_S_LINE_NBR,
                A_S_LINE_DESC,
                CAUSE_OF_LOSS,
                CAUSE_GROUP,
                TRANS_DATE,
                OPERATOR_ID,
                CLAIMANT_COVERAGE,
                STAFF_ADJUSTER,
                ADJUSTER_SUPERVISOR,
                HOME_OFFICE_SUPERVISOR,
                STAFF_ADJUSTER_BRANCH,
                STAFF_ADJUSTER_BRANCH_NAME,
                INDEPENDENT_ADJUSTER,
                IND_ADJUSTER_STATUS,
                IA_OPEN_DATE,
                IA_CLOSE_DATE,
                ASSISTANT_ADJUSTER,
                AA_ADJUSTER_STATUS,
                AA_OPEN_DATE,
                AA_CLOSE_DATE,
                SOURCE,
                LAST_MODIFIED
             FROM CCST_DW_CLAIMANT_ADJUSTER
            WHERE TRANS_DATE >= V_SDATE --AND TRANS_DATE <= V_EDATE
            ORDER BY LAST_MODIFIED;

        REC_CLAIMANT_ADJUSTER CUR_CC_CLAIMANT_ADJUSTER%ROWTYPE;
    BEGIN
        V_SDATE := START_DATE;
        V_EDATE := TO_DATE(TO_CHAR(END_DATE , 'DD-MON-YYYY') || ' 11:59:59 PM', 'DD-MON-YYYY HH:MI:SS PM');

        SELECT SEQ_RUN_DATE.NEXTVAL
        INTO V_RUN_DATE
        FROM DUAL;

        INSERT INTO RUN_DATE (
            RUN_DATE,
            PROCEDURE_NAME,
            START_DATE,
            END_DATE,
            OPERATOR_ID,
            START_TIME
        ) VALUES (
            V_RUN_DATE,
            'PKG_DAILY_CC_DW_UPDATE.SP_UPDATE_CCST_TO_DW_CLMT_ADJ',
            V_SDATE,
            NULL,
            USER,
            SYSDATE
        );
        COMMIT;
        
        OPEN CUR_CC_CLAIMANT_ADJUSTER;
        LOOP
            FETCH CUR_CC_CLAIMANT_ADJUSTER INTO REC_CLAIMANT_ADJUSTER;
            EXIT WHEN CUR_CC_CLAIMANT_ADJUSTER%NOTFOUND;
                       
            INSERT INTO DW_CLAIMANT_ADJUSTER (DW_CLAIMANT_ADJUSTER,
                CLAIM_KEY,
                CLAIMANT_KEY,
                DEPT_NBR,
                DEPT_DESC,
                BUSINESS_LINE_NAME,
                MAJOR_LINE_NAME,
                LINE_NBR,
                COVERAGE_LINE_DESC,
                A_S_LINE_NBR,
                A_S_LINE_DESC,
                CAUSE_OF_LOSS,
                CAUSE_GROUP,
                TRANS_DATE,
                OPERATOR_ID,
                CLAIMANT_COVERAGE,
                STAFF_ADJUSTER,
                ADJUSTER_SUPERVISOR,
                HOME_OFFICE_SUPERVISOR,
                STAFF_ADJUSTER_BRANCH,
                STAFF_ADJUSTER_BRANCH_NAME,
                INDEPENDENT_ADJUSTER,
                IND_ADJUSTER_STATUS,
                IA_OPEN_DATE,
                IA_CLOSE_DATE,
                ASSISTANT_ADJUSTER,
                AA_ADJUSTER_STATUS,
                AA_OPEN_DATE,
                AA_CLOSE_DATE,
                SOURCE,
                LAST_MODIFIED,
                LOAD_DATE
            ) VALUES (
                SEQ_DW_CLAIMANT_DETAIL.NEXTVAL,
                REC_CLAIMANT_ADJUSTER.CLAIM_KEY,
                REC_CLAIMANT_ADJUSTER.CLAIMANT_KEY,
                REC_CLAIMANT_ADJUSTER.DEPT_NBR,
                REC_CLAIMANT_ADJUSTER.DEPT_DESC,
                REC_CLAIMANT_ADJUSTER.BUSINESS_LINE_NAME,
                REC_CLAIMANT_ADJUSTER.MAJOR_LINE_NAME,-- MAJOR_LINE_NAME                          
                REC_CLAIMANT_ADJUSTER.LINE_NBR, -- LINE_NBR                                  
                REC_CLAIMANT_ADJUSTER.COVERAGE_LINE_DESC,  -- COVERAGE_LINE_DESC                      
                REC_CLAIMANT_ADJUSTER.A_S_LINE_NBR, -- A_S_LINE_NBR                               
                REC_CLAIMANT_ADJUSTER.A_S_LINE_DESC, -- A_S_LINE_DESC  
                REC_CLAIMANT_ADJUSTER.CAUSE_OF_LOSS,
                REC_CLAIMANT_ADJUSTER.CAUSE_GROUP,
                REC_CLAIMANT_ADJUSTER.TRANS_DATE,
                REC_CLAIMANT_ADJUSTER.OPERATOR_ID,
                REC_CLAIMANT_ADJUSTER.CLAIMANT_COVERAGE,
                REC_CLAIMANT_ADJUSTER.STAFF_ADJUSTER,
                REC_CLAIMANT_ADJUSTER.ADJUSTER_SUPERVISOR,
                REC_CLAIMANT_ADJUSTER.HOME_OFFICE_SUPERVISOR, --  HOME_OFFICE_SUPERVISOR I.E, WILL BE EMPTY CC CLAIMS
                REC_CLAIMANT_ADJUSTER.STAFF_ADJUSTER_BRANCH, -- STAFF_ADJUSTER_BRANCH                       
                REC_CLAIMANT_ADJUSTER.STAFF_ADJUSTER_BRANCH_NAME, -- STAFF_ADJUSTER_BRANCH_NAME 
                REC_CLAIMANT_ADJUSTER.INDEPENDENT_ADJUSTER, -- INDEPENDENT_ADJUSTER
                REC_CLAIMANT_ADJUSTER.IND_ADJUSTER_STATUS, -- IND_ADJUSTER_STATUS
                REC_CLAIMANT_ADJUSTER.IA_OPEN_DATE, -- IA_OPEN_DATE                                      
                REC_CLAIMANT_ADJUSTER.IA_CLOSE_DATE, -- IA_CLOSE_DATE                                     
                REC_CLAIMANT_ADJUSTER.ASSISTANT_ADJUSTER, -- ASSISTANT_ADJUSTER  I.E, WILL BE EMPTY CC CLAIMS                    
                REC_CLAIMANT_ADJUSTER.AA_ADJUSTER_STATUS, -- AA_ADJUSTER_STATUS    I.E, WILL BE EMPTY CC CLAIMS                    
                REC_CLAIMANT_ADJUSTER.AA_OPEN_DATE, -- AA_OPEN_DATE  I.E, WILL BE EMPTY CC CLAIMS                                       
                REC_CLAIMANT_ADJUSTER.AA_CLOSE_DATE, -- AA_CLOSE_DATE   I.E, WILL BE EMPTY CC CLAIMS 
                REC_CLAIMANT_ADJUSTER.SOURCE,
                REC_CLAIMANT_ADJUSTER.LAST_MODIFIED,
                SYSDATE
            );
      
          V_COMMIT_COUNT := V_COMMIT_COUNT + 1;
          IF V_COMMIT_COUNT > 999 THEN
             COMMIT;
             V_COMMIT_COUNT := 0;
          END IF;
        END LOOP;

        CLOSE CUR_CC_CLAIMANT_ADJUSTER;
        COMMIT;

        UPDATE RUN_DATE
        SET END_TIME = SYSDATE
        WHERE RUN_DATE = V_RUN_DATE;
        COMMIT;

EXCEPTION
   WHEN STANDARD.NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20201, 'DATA SELECTION NOT SUCCESSFUL.');
   WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR (-20001, 'SP_UPDATE_CCST_TO_DW_CLMT_ADJ.. ' ||SQLERRM);
        
END SP_UPDATE_CCST_TO_DW_CLMT_ADJ;

END PKG_DAILY_CC_DW_UPDATE_PROD;